<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Int Flash Debug\HM16F3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Int Flash Debug\HM16F3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Thu Dec 29 11:28:09 2016
<BR><P>
<H3>Maximum Stack Usage =       1424 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ProcessUARTMsg &rArr; ProcessMsg &rArr; rqtwReg &rArr; writeReg &rArr; SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f]">__boot</a>
 <LI><a href="#[2c7]">_sched_start_internal</a>
 <LI><a href="#[2dc]">_sched_run_internal</a>
 <LI><a href="#[2b0]">_sched_check_scheduler_internal</a>
 <LI><a href="#[2c0]">_sched_execute_scheduler_internal</a>
 <LI><a href="#[eb]">_mqx_api_call</a>
 <LI><a href="#[2b4]">_task_block</a>
 <LI><a href="#[11]">_svc_handler</a>
 <LI><a href="#[12]">_pend_svc</a>
 <LI><a href="#[10]">_int_kernel_isr</a>
 <LI><a href="#[384]">_psp_exception_return</a>
 <LI><a href="#[385]">_psp_save_fp_context_internal</a>
 <LI><a href="#[386]">_mem_test_and_set</a>
 <LI><a href="#[387]">__get_PSP</a>
 <LI><a href="#[388]">__get_MSP</a>
 <LI><a href="#[2cf]">__set_MSP</a>
 <LI><a href="#[389]">__get_PSR</a>
 <LI><a href="#[2fb]">__enable_interrupt</a>
 <LI><a href="#[2fa]">__disable_interrupt</a>
 <LI><a href="#[38a]">__get_LR</a>
 <LI><a href="#[38b]">__get_PC</a>
 <LI><a href="#[38c]">__get_CONTROL</a>
 <LI><a href="#[17]">_int_kernel_isr_epilog</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8a]">CanHandle_Task</a> from can_ctrl.o(i.CanHandle_Task) referenced from main.o(.constdata)
 <LI><a href="#[8b]">CheckLDV_Task</a> from api.o(i.CheckLDV_Task) referenced from main.o(.constdata)
 <LI><a href="#[87]">CurCtrl_Task</a> from api.o(i.CurCtrl_Task) referenced from main.o(.constdata)
 <LI><a href="#[19]">MY_FLEXCAN_ISR</a> from can_ctrl.o(i.MY_FLEXCAN_ISR) referenced from can_ctrl.o(i.Rx_Task)
 <LI><a href="#[19]">MY_FLEXCAN_ISR</a> from can_ctrl.o(i.MY_FLEXCAN_ISR) referenced from can_ctrl.o(i.canInit_Task)
 <LI><a href="#[85]">ProcessUARTMsg</a> from gs_protocol.o(i.ProcessUARTMsg) referenced from main.o(.constdata)
 <LI><a href="#[83]">Rx_reg_Task</a> from can_ctrl.o(i.Rx_reg_Task) referenced from main.o(.constdata)
 <LI><a href="#[82]">Rx_state_Task</a> from can_ctrl.o(i.Rx_state_Task) referenced from main.o(.constdata)
 <LI><a href="#[84]">Tx_Task</a> from can_ctrl.o(i.Tx_Task) referenced from main.o(.constdata)
 <LI><a href="#[f]">__boot</a> from boot.o(. text) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[2c]">_adc_close</a> from adc.o(i._adc_close) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[29]">_adc_ioctl</a> from adc.o(i._adc_ioctl) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[2d]">_adc_open</a> from adc.o(i._adc_open) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[2b]">_adc_read</a> from adc.o(i._adc_read) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[2a]">_adc_write</a> from adc.o(i._adc_write) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[1d]">_bsp_get_hwticks</a> from init_bsp.o(i._bsp_get_hwticks) referenced from init_bsp.o(i._bsp_pre_init)
 <LI><a href="#[1c]">_bsp_systimer_callback</a> from init_bsp.o(i._bsp_systimer_callback) referenced from init_bsp.o(i._bsp_pre_init)
 <LI><a href="#[aa]">_dspi_cs_deassert</a> from spi_dspi.o(i._dspi_cs_deassert) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[a7]">_dspi_deinit</a> from spi_dspi.o(i._dspi_deinit) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[1e]">_dspi_dma_callback</a> from spi_dspi_dma.o(i._dspi_dma_callback) referenced from spi_dspi_dma.o(i._dspi_dma_init)
 <LI><a href="#[a4]">_dspi_dma_cs_deassert</a> from spi_dspi_dma.o(i._dspi_dma_cs_deassert) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a1]">_dspi_dma_deinit</a> from spi_dspi_dma.o(i._dspi_dma_deinit) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a0]">_dspi_dma_init</a> from spi_dspi_dma.o(i._dspi_dma_init) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a5]">_dspi_dma_ioctl</a> from spi_dspi_dma.o(i._dspi_dma_ioctl) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a2]">_dspi_dma_setparam</a> from spi_dspi_dma.o(i._dspi_dma_setparam) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a3]">_dspi_dma_tx_rx</a> from spi_dspi_dma.o(i._dspi_dma_tx_rx) referenced from spi_dspi_dma.o(.constdata)
 <LI><a href="#[a6]">_dspi_init</a> from spi_dspi.o(i._dspi_init) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[ab]">_dspi_ioctl</a> from spi_dspi.o(i._dspi_ioctl) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[1f]">_dspi_isr</a> from spi_dspi.o(i._dspi_isr) referenced from spi_dspi.o(i._dspi_init)
 <LI><a href="#[a8]">_dspi_setparam</a> from spi_dspi.o(i._dspi_setparam) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[a9]">_dspi_tx_rx</a> from spi_dspi.o(i._dspi_tx_rx) referenced from spi_dspi.o(.constdata)
 <LI><a href="#[25]">_esdhc_close</a> from esdhc.o(i._esdhc_close) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[22]">_esdhc_ioctl</a> from esdhc.o(i._esdhc_ioctl) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[20]">_esdhc_isr</a> from esdhc.o(i._esdhc_isr) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[26]">_esdhc_open</a> from esdhc.o(i._esdhc_open) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[24]">_esdhc_read</a> from esdhc.o(i._esdhc_read) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[21]">_esdhc_uninstall</a> from esdhc.o(i._esdhc_uninstall) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[23]">_esdhc_write</a> from esdhc.o(i._esdhc_write) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[13]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[27]">_int_default_isr</a> from int.o(i._int_default_isr) referenced from int.o(i._int_init)
 <LI><a href="#[27]">_int_default_isr</a> from int.o(i._int_default_isr) referenced from int.o(i._int_install_isr)
 <LI><a href="#[10]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced 247 times from vectors.o(.vectors_rom)
 <LI><a href="#[10]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced from int.o(i._int_init)
 <LI><a href="#[17]">_int_kernel_isr_epilog</a> from dispatch.o(KERNEL) referenced from dispatch.o(KERNEL)
 <LI><a href="#[28]">_int_unexpected_isr</a> from int_unx.o(i._int_unexpected_isr) referenced from int.o(i._int_install_unexpected_isr)
 <LI><a href="#[32]">_io_flashx_close</a> from flashx.o(i._io_flashx_close) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[2f]">_io_flashx_ioctl</a> from flashx.o(i._io_flashx_ioctl) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[33]">_io_flashx_open</a> from flashx.o(i._io_flashx_open) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[31]">_io_flashx_read</a> from flashx.o(i._io_flashx_read) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[2e]">_io_flashx_uninstall</a> from flashx.o(i._io_flashx_uninstall) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[30]">_io_flashx_write</a> from flashx.o(i._io_flashx_write) referenced from flashx.o(i._io_flashx_install)
 <LI><a href="#[40]">_io_fputc</a> from io_fputc.o(i._io_fputc) referenced from io_pntf.o(i._io_printf)
 <LI><a href="#[38]">_io_i2c_int_close</a> from i2c_int.o(i._io_i2c_int_close) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[35]">_io_i2c_int_ioctl</a> from i2c_int.o(i._io_i2c_int_ioctl) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[39]">_io_i2c_int_open</a> from i2c_int.o(i._io_i2c_int_open) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[37]">_io_i2c_int_read</a> from i2c_int.o(i._io_i2c_int_read) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[34]">_io_i2c_int_uninstall</a> from i2c_int.o(i._io_i2c_int_uninstall) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[36]">_io_i2c_int_write</a> from i2c_int.o(i._io_i2c_int_write) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[3e]">_io_i2c_polled_close</a> from i2c_pol.o(i._io_i2c_polled_close) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[3b]">_io_i2c_polled_ioctl</a> from i2c_pol.o(i._io_i2c_polled_ioctl) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[3f]">_io_i2c_polled_open</a> from i2c_pol.o(i._io_i2c_polled_open) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[3d]">_io_i2c_polled_read</a> from i2c_pol.o(i._io_i2c_polled_read) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[3a]">_io_i2c_polled_uninstall</a> from i2c_pol.o(i._io_i2c_polled_uninstall) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[3c]">_io_i2c_polled_write</a> from i2c_pol.o(i._io_i2c_polled_write) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[45]">_io_sai_int_close</a> from sai_int.o(i._io_sai_int_close) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[42]">_io_sai_int_ioctl</a> from sai_int.o(i._io_sai_int_ioctl) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[46]">_io_sai_int_open</a> from sai_int.o(i._io_sai_int_open) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[44]">_io_sai_int_read</a> from sai_int.o(i._io_sai_int_read) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[41]">_io_sai_int_uninstall</a> from sai_int.o(i._io_sai_int_uninstall) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[43]">_io_sai_int_write</a> from sai_int.o(i._io_sai_int_write) referenced from sai_int.o(i._io_sai_int_install)
 <LI><a href="#[4a]">_io_serial_int_close</a> from serl_int.o(i._io_serial_int_close) referenced from serl_int.o(i._io_serial_int_install)
 <LI><a href="#[47]">_io_serial_int_ioctl</a> from serl_int.o(i._io_serial_int_ioctl) referenced from serl_int.o(i._io_serial_int_install)
 <LI><a href="#[4b]">_io_serial_int_open</a> from serl_int.o(i._io_serial_int_open) referenced from serl_int.o(i._io_serial_int_install)
 <LI><a href="#[49]">_io_serial_int_read</a> from serl_int.o(i._io_serial_int_read) referenced from serl_int.o(i._io_serial_int_install)
 <LI><a href="#[48]">_io_serial_int_write</a> from serl_int.o(i._io_serial_int_write) referenced from serl_int.o(i._io_serial_int_install)
 <LI><a href="#[4f]">_io_serial_polled_close</a> from serl_pol.o(i._io_serial_polled_close) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[4c]">_io_serial_polled_ioctl</a> from serl_pol.o(i._io_serial_polled_ioctl) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[50]">_io_serial_polled_open</a> from serl_pol.o(i._io_serial_polled_open) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[4e]">_io_serial_polled_read</a> from serl_pol.o(i._io_serial_polled_read) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[4d]">_io_serial_polled_write</a> from serl_pol.o(i._io_serial_polled_write) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[55]">_io_spi_close</a> from spi.o(i._io_spi_close) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[52]">_io_spi_ioctl</a> from spi.o(i._io_spi_ioctl) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[56]">_io_spi_open</a> from spi.o(i._io_spi_open) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[54]">_io_spi_read</a> from spi.o(i._io_spi_read) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[51]">_io_spi_uninstall</a> from spi.o(i._io_spi_uninstall) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[53]">_io_spi_write</a> from spi.o(i._io_spi_write) referenced from spi.o(i._io_spi_install)
 <LI><a href="#[57]">_io_sputc</a> from io_spr.o(i._io_sputc) referenced from io_spr.o(i._io_sprintf)
 <LI><a href="#[5c]">_ki2c_int_deinit</a> from i2c_int_ki2c.o(i._ki2c_int_deinit) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[5d]">_ki2c_int_init</a> from i2c_int_ki2c.o(i._ki2c_int_init) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[5b]">_ki2c_int_rx</a> from i2c_int_ki2c.o(i._ki2c_int_rx) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[5a]">_ki2c_int_tx</a> from i2c_int_ki2c.o(i._ki2c_int_tx) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[58]">_ki2c_isr</a> from i2c_int_ki2c.o(i._ki2c_isr) referenced from i2c_int_ki2c.o(i._ki2c_int_init)
 <LI><a href="#[60]">_ki2c_polled_deinit</a> from i2c_pol_ki2c.o(i._ki2c_polled_deinit) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[61]">_ki2c_polled_init</a> from i2c_pol_ki2c.o(i._ki2c_polled_init) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[59]">_ki2c_polled_ioctl</a> from i2c_pol_ki2c.o(i._ki2c_polled_ioctl) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[59]">_ki2c_polled_ioctl</a> from i2c_pol_ki2c.o(i._ki2c_polled_ioctl) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[5f]">_ki2c_polled_rx</a> from i2c_pol_ki2c.o(i._ki2c_polled_rx) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[5e]">_ki2c_polled_tx</a> from i2c_pol_ki2c.o(i._ki2c_polled_tx) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[99]">_ksai_dma_deinit</a> from sai_dma_ksai.o(i._ksai_dma_deinit) referenced from init_sai.o(.constdata)
 <LI><a href="#[98]">_ksai_dma_init</a> from sai_dma_ksai.o(i._ksai_dma_init) referenced from init_sai.o(.constdata)
 <LI><a href="#[9a]">_ksai_dma_ioctl</a> from sai_dma_ksai.o(i._ksai_dma_ioctl) referenced from init_sai.o(.constdata)
 <LI><a href="#[64]">_ksai_rx_dma_irq_handler</a> from sai_dma_ksai.o(i._ksai_rx_dma_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[65]">_ksai_rx_fifoerr_irq_handler</a> from sai_dma_ksai.o(i._ksai_rx_fifoerr_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[62]">_ksai_tx_dma_irq_handler</a> from sai_dma_ksai.o(i._ksai_tx_dma_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[63]">_ksai_tx_fifoerr_irq_handler</a> from sai_dma_ksai.o(i._ksai_tx_fifoerr_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[6a]">_kuart_int_deinit</a> from serl_int_kuart.o(i._kuart_int_deinit) referenced from serl_int_kuart.o(i._kuart_int_install)
 <LI><a href="#[6b]">_kuart_int_enable</a> from serl_int_kuart.o(i._kuart_int_enable) referenced from serl_int_kuart.o(i._kuart_int_install)
 <LI><a href="#[66]">_kuart_int_err_isr</a> from serl_int_kuart.o(i._kuart_int_err_isr) referenced from serl_int_kuart.o(i._kuart_int_init)
 <LI><a href="#[6c]">_kuart_int_init</a> from serl_int_kuart.o(i._kuart_int_init) referenced from serl_int_kuart.o(i._kuart_int_install)
 <LI><a href="#[69]">_kuart_int_putc</a> from serl_int_kuart.o(i._kuart_int_putc) referenced from serl_int_kuart.o(i._kuart_int_install)
 <LI><a href="#[67]">_kuart_int_rx_tx_isr</a> from serl_int_kuart.o(i._kuart_int_rx_tx_isr) referenced from serl_int_kuart.o(i._kuart_int_init)
 <LI><a href="#[70]">_kuart_polled_deinit</a> from serl_pol_kuart.o(i._kuart_polled_deinit) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[6f]">_kuart_polled_getc</a> from serl_pol_kuart.o(i._kuart_polled_getc) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[71]">_kuart_polled_init</a> from serl_pol_kuart.o(i._kuart_polled_init) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[68]">_kuart_polled_ioctl</a> from serl_pol_kuart.o(i._kuart_polled_ioctl) referenced from serl_int_kuart.o(i._kuart_int_install)
 <LI><a href="#[68]">_kuart_polled_ioctl</a> from serl_pol_kuart.o(i._kuart_polled_ioctl) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[6e]">_kuart_polled_putc</a> from serl_pol_kuart.o(i._kuart_polled_putc) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[6d]">_kuart_polled_status</a> from serl_pol_kuart.o(i._kuart_polled_status) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[73]">_mqx_idle_task</a> from idletask.o(i._mqx_idle_task) referenced from mqx.o(i._mqx_init_kernel_data_internal)
 <LI><a href="#[72]">_mqx_init_task</a> from inittask.o(i._mqx_init_task) referenced from mqx.o(i._mqx_init_kernel_data_internal)
 <LI><a href="#[12]">_pend_svc</a> from dispatch.o(KERNEL) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[15]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[14]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[11]">_svc_handler</a> from dispatch.o(KERNEL) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[74]">_task_exit_function_internal</a> from task.o(i._task_exit_function_internal) referenced from stack_bu.o(i._psp_build_stack_frame)
 <LI><a href="#[1a]">adc_complete_isr</a> from adc_kadc.o(i.adc_complete_isr) referenced from adc_kadc.o(i._adc_hw_init)
 <LI><a href="#[1b]">adt_idelay_isr</a> from adt_kpdb.o(i.adt_idelay_isr) referenced from adt_kpdb.o(i._adt_hw_init)
 <LI><a href="#[7b]">cmp0_isr</a> from capture.o(i.cmp0_isr) referenced from capture.o(i.hscmp_init)
 <LI><a href="#[6]">edma_channel_claim</a> from edma.o(i.edma_channel_claim) referenced 2 times from edma.o(.data)
 <LI><a href="#[7]">edma_channel_release</a> from edma.o(i.edma_channel_release) referenced 2 times from edma.o(.data)
 <LI><a href="#[8]">edma_channel_reset</a> from edma.o(i.edma_channel_reset) referenced 2 times from edma.o(.data)
 <LI><a href="#[9]">edma_channel_setup</a> from edma.o(i.edma_channel_setup) referenced 2 times from edma.o(.data)
 <LI><a href="#[a]">edma_channel_status</a> from edma.o(i.edma_channel_status) referenced 2 times from edma.o(.data)
 <LI><a href="#[5]">edma_deinit</a> from edma.o(i.edma_deinit) referenced 2 times from edma.o(.data)
 <LI><a href="#[75]">edma_done_isr</a> from edma.o(i.edma_done_isr) referenced from edma.o(i.edma_install_isrs)
 <LI><a href="#[76]">edma_err_isr</a> from edma.o(i.edma_err_isr) referenced from edma.o(i.edma_install_isrs)
 <LI><a href="#[4]">edma_init</a> from edma.o(i.edma_init) referenced 2 times from edma.o(.data)
 <LI><a href="#[e]">edma_request_disable</a> from edma.o(i.edma_request_disable) referenced 2 times from edma.o(.data)
 <LI><a href="#[d]">edma_request_enable</a> from edma.o(i.edma_request_enable) referenced 2 times from edma.o(.data)
 <LI><a href="#[c]">edma_request_source</a> from edma.o(i.edma_request_source) referenced 2 times from edma.o(.data)
 <LI><a href="#[b]">edma_transfer_submit</a> from edma.o(i.edma_transfer_submit) referenced 2 times from edma.o(.data)
 <LI><a href="#[9f]">ffte_flash_ioctl</a> from flash_ftfe.o(i.ffte_flash_ioctl) referenced from flash_ftfe.o(.constdata)
 <LI><a href="#[9e]">ftfe_flash_deinit</a> from flash_ftfe.o(i.ftfe_flash_deinit) referenced from flash_ftfe.o(.constdata)
 <LI><a href="#[9b]">ftfe_flash_erase_sector</a> from flash_ftfe.o(i.ftfe_flash_erase_sector) referenced from flash_ftfe.o(.constdata)
 <LI><a href="#[9d]">ftfe_flash_init</a> from flash_ftfe.o(i.ftfe_flash_init) referenced from flash_ftfe.o(.constdata)
 <LI><a href="#[9c]">ftfe_flash_write_sector</a> from flash_ftfe.o(i.ftfe_flash_write_sector) referenced from flash_ftfe.o(.constdata)
 <LI><a href="#[78]">ftfe_ram_function</a> from flash_ftfe.o(i.ftfe_ram_function) referenced from flash_ftfe.o(i.ftfe_flash_init)
 <LI><a href="#[77]">ftfe_ram_function_end</a> from flash_ftfe.o(i.ftfe_ram_function_end) referenced from flash_ftfe.o(i.ftfe_flash_init)
 <LI><a href="#[18]">hwtimer1_callback</a> from time.o(i.hwtimer1_callback) referenced from time.o(i.InitTime)
 <LI><a href="#[8d]">hwtimer_pit_deinit</a> from hwtimer_pit.o(i.hwtimer_pit_deinit) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[91]">hwtimer_pit_get_time</a> from hwtimer_pit.o(i.hwtimer_pit_get_time) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[8c]">hwtimer_pit_init</a> from hwtimer_pit.o(i.hwtimer_pit_init) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[7c]">hwtimer_pit_isr</a> from hwtimer_pit.o(i.hwtimer_pit_isr) referenced from hwtimer_pit.o(i.hwtimer_pit_init)
 <LI><a href="#[7d]">hwtimer_pit_isr_shared</a> from hwtimer_pit.o(i.hwtimer_pit_isr_shared) referenced from hwtimer_pit.o(i.hwtimer_pit_init)
 <LI><a href="#[8e]">hwtimer_pit_set_div</a> from hwtimer_pit.o(i.hwtimer_pit_set_div) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[8f]">hwtimer_pit_start</a> from hwtimer_pit.o(i.hwtimer_pit_start) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[90]">hwtimer_pit_stop</a> from hwtimer_pit.o(i.hwtimer_pit_stop) referenced from hwtimer_pit.o(.constdata)
 <LI><a href="#[93]">hwtimer_systick_deinit</a> from hwtimer_systick.o(i.hwtimer_systick_deinit) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[97]">hwtimer_systick_get_time</a> from hwtimer_systick.o(i.hwtimer_systick_get_time) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[92]">hwtimer_systick_init</a> from hwtimer_systick.o(i.hwtimer_systick_init) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[7e]">hwtimer_systick_isr</a> from hwtimer_systick.o(i.hwtimer_systick_isr) referenced from hwtimer_systick.o(i.hwtimer_systick_init)
 <LI><a href="#[94]">hwtimer_systick_set_div</a> from hwtimer_systick.o(i.hwtimer_systick_set_div) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[95]">hwtimer_systick_start</a> from hwtimer_systick.o(i.hwtimer_systick_start) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[96]">hwtimer_systick_stop</a> from hwtimer_systick.o(i.hwtimer_systick_stop) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[7f]">int_service_routine</a> from fpga_int.o(i.int_service_routine) referenced from fpga_int.o(i.int_task)
 <LI><a href="#[16]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7a]">kinetis_flash_invalidate_cache</a> from flash_mk64.o(i.kinetis_flash_invalidate_cache) referenced from flash_ftfe.o(i.ftfe_flash_init)
 <LI><a href="#[79]">kinetis_flash_invalidate_cache_end</a> from flash_mk64.o(i.kinetis_flash_invalidate_cache_end) referenced from flash_ftfe.o(i.ftfe_flash_init)
 <LI><a href="#[80]">main_task</a> from main.o(i.main_task) referenced from main.o(.constdata)
 <LI><a href="#[86]">thermostat_task</a> from thermostat.o(i.thermostat_task) referenced from main.o(.constdata)
 <LI><a href="#[88]">uart_comm_rec_task</a> from uart_ctrl.o(i.uart_comm_rec_task) referenced from main.o(.constdata)
 <LI><a href="#[89]">uart_hmi_rec_task</a> from uart_ctrl.o(i.uart_hmi_rec_task) referenced from main.o(.constdata)
 <LI><a href="#[81]">uart_task</a> from uart_ctrl.o(i.uart_task) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ac]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[354]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[355]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[356]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[357]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[358]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f]"></a>__boot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, boot.o(. text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __boot &rArr; toolchain_startup &rArr; init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectors_rom)
</UL>
<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[359]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[35a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[35d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[35f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[360]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[361]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[362]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[363]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[364]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[365]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[366]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[367]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[368]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[369]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[36a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[36b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[36c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[36d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[36e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[36f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[370]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[371]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[ae]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[372]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[373]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[374]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[375]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comp.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[25a]"></a>__set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psp_supp.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_msecs_to_ticks_quick
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_div_128_by_32
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[376]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt64
</UL>

<P><STRONG><a name="[c4]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c6]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2ch
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
</UL>

<P><STRONG><a name="[c9]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_open
</UL>

<P><STRONG><a name="[310]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getver
</UL>

<P><STRONG><a name="[2e7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countCoNum
</UL>

<P><STRONG><a name="[109]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQDIRswitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getver
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCerror
</UL>

<P><STRONG><a name="[1fb]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strLow2Cap
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2ch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countCoNum
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[266]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>

<P><STRONG><a name="[332]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_init_ram_function
</UL>

<P><STRONG><a name="[cc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[377]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_ioctl
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDefault
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifinit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstrpara
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpara
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_open
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[ce]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[37b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_DAC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_ADC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_reg2mem
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_mem2reg
</UL>

<P><STRONG><a name="[37c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d0]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstrpara
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpara
</UL>

<P><STRONG><a name="[1f9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCR
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ca]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[37e]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[d3]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[cb]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[d7]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[c8]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[16]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[14]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d9]"></a>_btod_etento</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[c3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e4]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[353]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[380]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[382]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e7]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[e8]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[e3]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[db]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[e2]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[da]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ea]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2c7]"></a>_sched_start_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[2dc]"></a>_sched_run_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[2b0]"></a>_sched_check_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[2c0]"></a>_sched_execute_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>

<P><STRONG><a name="[eb]"></a>_mqx_api_call</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>

<P><STRONG><a name="[2b4]"></a>_task_block</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[11]"></a>_svc_handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectors_rom)
</UL>
<P><STRONG><a name="[12]"></a>_pend_svc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectors_rom)
</UL>
<P><STRONG><a name="[10]"></a>_int_kernel_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.vectors_rom)
<LI> int.o(i._int_init)
</UL>
<P><STRONG><a name="[384]"></a>_psp_exception_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[385]"></a>_psp_save_fp_context_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[386]"></a>_mem_test_and_set</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[387]"></a>__get_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[388]"></a>__get_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[2cf]"></a>__set_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>

<P><STRONG><a name="[389]"></a>__get_PSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[2fb]"></a>__enable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_command_sequence
</UL>

<P><STRONG><a name="[2fa]"></a>__disable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_command_sequence
</UL>

<P><STRONG><a name="[38a]"></a>__get_LR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[38b]"></a>__get_PC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[38c]"></a>__get_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[ec]"></a>CAN_LongRead</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, can_ctrl.o(i.CAN_LongRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = CAN_LongRead &rArr; GetTemp &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Tx_mailbox
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetCurrentWithDAC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKpfromFlash
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKifromFlash
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKdfromFlash
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
</UL>

<P><STRONG><a name="[fc]"></a>CAN_LongWrite</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, can_ctrl.o(i.CAN_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_LongWrite &rArr; writeDAC &rArr; DAC_SetBufferValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACValueWithCurrent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCWithTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
</UL>

<P><STRONG><a name="[101]"></a>CLOCK_GetClockFrequency</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, common_inc.o(i.CLOCK_GetClockFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetClockFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
</UL>

<P><STRONG><a name="[203]"></a>CPU_GetClockConfiguration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_cm.o(i.CPU_GetClockConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
</UL>

<P><STRONG><a name="[104]"></a>CPU_GetClockGenMode</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bsp_cm.o(i.CPU_GetClockGenMode))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>

<P><STRONG><a name="[21a]"></a>CPU_MCGAutoTrim</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, bsp_cm.o(i.CPU_MCGAutoTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_MCGAutoTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_osc_autotrim
</UL>

<P><STRONG><a name="[103]"></a>CPU_SetClockConfigGenMode</STRONG> (Thumb, 1052 bytes, Stack size 20 bytes, bsp_cm.o(i.CPU_SetClockConfigGenMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetClockGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>

<P><STRONG><a name="[105]"></a>CPU_SetClockConfiguration</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, bsp_cm.o(i.CPU_SetClockConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CPU_SetClockConfiguration &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDD_SetClockConfiguration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
</UL>

<P><STRONG><a name="[107]"></a>CRCerror</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gs_protocol.o(i.CRCerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = CRCerror &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[333]"></a>CalCRC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, api.o(i.CalCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
</UL>

<P><STRONG><a name="[8a]"></a>CanHandle_Task</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, can_ctrl.o(i.CanHandle_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = CanHandle_Task &rArr; CAN_LongRead &rArr; GetTemp &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Tx_mailbox
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongWrite
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>CheckLDV_Task</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, api.o(i.CheckLDV_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = CheckLDV_Task &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>ClearElement</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, queue.o(i.ClearElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ClearElement &rArr; NEXT
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEXT
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[10e]"></a>ConReadADC</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc_ctrl.o(i.ConReadADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_wait_next
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_read_raw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_DAC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_ADC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_single
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initThermoPara
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
</UL>

<P><STRONG><a name="[87]"></a>CurCtrl_Task</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, api.o(i.CurCtrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CurCtrl_Task &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>CurrCalibration</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, api.o(i.CurrCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = CurrCalibration &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACValueWithCurrent
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[32c]"></a>DAC_GetBufferValue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dac_ctrl.o(i.DAC_GetBufferValue))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
</UL>

<P><STRONG><a name="[2e9]"></a>DAC_Init</STRONG> (Thumb, 588 bytes, Stack size 0 bytes, dac_ctrl.o(i.DAC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[33b]"></a>DAC_SetBufferValue</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, dac_ctrl.o(i.DAC_SetBufferValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_SetBufferValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
</UL>

<P><STRONG><a name="[15c]"></a>Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common_fun.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
</UL>

<P><STRONG><a name="[11c]"></a>EEPROM_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom.o(i.EEPROM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EEPROM_init &rArr; ifinit &rArr; initDefault &rArr; writeEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifinit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[16a]"></a>EmptyQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.EmptyQ))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[11e]"></a>Enqueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, queue.o(i.Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_rec_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_rec_task
</UL>

<P><STRONG><a name="[120]"></a>FLASH_EraseSector</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash_rw.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEEprom_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>

<P><STRONG><a name="[122]"></a>FLASH_WriteSector</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, flash_rw.o(i.FLASH_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEEprom_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>

<P><STRONG><a name="[123]"></a>FLEXCAN_Activate_mailbox</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, kflexcan.o(i.FLEXCAN_Activate_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCAN_Activate_mailbox
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Task
</UL>

<P><STRONG><a name="[125]"></a>FLEXCAN_Error_int_enable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, kflexcan_int.o(i.FLEXCAN_Error_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FLEXCAN_Error_int_enable &rArr; _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[128]"></a>FLEXCAN_Initialize</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, kflexcan.o(i.FLEXCAN_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FLEXCAN_Initialize &rArr; _cm_get_clock &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Softreset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_get_clock_configuration
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_get_clock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Select_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[12d]"></a>FLEXCAN_Initialize_mailbox</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, kflexcan.o(i.FLEXCAN_Initialize_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FLEXCAN_Initialize_mailbox &rArr; FLEXCAN_Int_enable &rArr; _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Task
</UL>

<P><STRONG><a name="[130]"></a>FLEXCAN_Install_isr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, kflexcan_int.o(i.FLEXCAN_Install_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FLEXCAN_Install_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Task
</UL>

<P><STRONG><a name="[133]"></a>FLEXCAN_Install_isr_boff_int</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, kflexcan_int.o(i.FLEXCAN_Install_isr_boff_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FLEXCAN_Install_isr_boff_int &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[134]"></a>FLEXCAN_Install_isr_err_int</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, kflexcan_int.o(i.FLEXCAN_Install_isr_err_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FLEXCAN_Install_isr_err_int &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[12f]"></a>FLEXCAN_Int_disable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kflexcan_int.o(i.FLEXCAN_Int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FLEXCAN_Int_disable &rArr; _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize_mailbox
</UL>

<P><STRONG><a name="[12e]"></a>FLEXCAN_Int_enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kflexcan_int.o(i.FLEXCAN_Int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FLEXCAN_Int_enable &rArr; _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_vector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize_mailbox
</UL>

<P><STRONG><a name="[135]"></a>FLEXCAN_Lock_mailbox</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Lock_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Lock_mailbox
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
</UL>

<P><STRONG><a name="[136]"></a>FLEXCAN_Rx_message</STRONG> (Thumb, 590 bytes, Stack size 80 bytes, kflexcan.o(i.FLEXCAN_Rx_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLEXCAN_Rx_message
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
</UL>

<P><STRONG><a name="[12a]"></a>FLEXCAN_Select_clk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Select_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Select_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
</UL>

<P><STRONG><a name="[137]"></a>FLEXCAN_Select_mode</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, kflexcan.o(i.FLEXCAN_Select_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCAN_Select_mode &rArr; FLEXCAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[139]"></a>FLEXCAN_Set_global_stdmask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Set_global_stdmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Set_global_stdmask
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[129]"></a>FLEXCAN_Softreset</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Softreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Softreset
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
</UL>

<P><STRONG><a name="[138]"></a>FLEXCAN_Start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Select_mode
</UL>

<P><STRONG><a name="[fa]"></a>FLEXCAN_Tx_mailbox</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, kflexcan.o(i.FLEXCAN_Tx_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_Tx_mailbox
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[13a]"></a>FLEXCAN_Unlock_mailbox</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kflexcan.o(i.FLEXCAN_Unlock_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_Unlock_mailbox
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
</UL>

<P><STRONG><a name="[13b]"></a>FLEXCAN_Update_message</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, kflexcan.o(i.FLEXCAN_Update_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXCAN_Update_message
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
</UL>

<P><STRONG><a name="[142]"></a>FTM_PWM_ChangeDuty</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ftm.o(i.FTM_PWM_ChangeDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THOswitch
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
</UL>

<P><STRONG><a name="[143]"></a>FTM_PWM_InvertPolarity</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ftm.o(i.FTM_PWM_InvertPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_PWM_InvertPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
</UL>

<P><STRONG><a name="[13e]"></a>FTM_PWM_QuickInit</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, ftm.o(i.FTM_PWM_QuickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTM_PWM_QuickInit &rArr; FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FTM_InitBasic
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[144]"></a>FlashEEprom_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, eeprom.o(i.FlashEEprom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = FlashEEprom_Init &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[146]"></a>GPIO_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinOpenDrainConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
</UL>

<P><STRONG><a name="[149]"></a>GPIO_PinConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.GPIO_PinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[14a]"></a>GPIO_QuickInit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gpio.o(i.GPIO_QuickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[167]"></a>GPIO_ReadBit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ReadBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardID
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_service_routine
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
</UL>

<P><STRONG><a name="[160]"></a>GPIO_ReadBitIn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ReadBitIn))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[112]"></a>GPIO_ToggleBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ToggleBit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
</UL>

<P><STRONG><a name="[118]"></a>GPIO_WriteBit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(i.GPIO_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurCtrl_Task
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
</UL>

<P><STRONG><a name="[100]"></a>GetADCWithTemp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, api.o(i.GetADCWithTemp))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
</UL>

<P><STRONG><a name="[14b]"></a>GetAimCurrWithInitCurr</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, api.o(i.GetAimCurrWithInitCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetAimCurrWithInitCurr &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
</UL>

<P><STRONG><a name="[14d]"></a>GetAimTempWithInitTemp</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, api.o(i.GetAimTempWithInitTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetAimTempWithInitTemp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
</UL>

<P><STRONG><a name="[f7]"></a>GetCurrent</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, api.o(i.GetCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
</UL>

<P><STRONG><a name="[309]"></a>GetCurrentWidthPower</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gs_protocol.o(i.GetCurrentWidthPower))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
</UL>

<P><STRONG><a name="[14e]"></a>GetDACRef</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, api.o(i.GetDACRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = GetDACRef &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[fe]"></a>GetDACValueWithCurrent</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, api.o(i.GetDACValueWithCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
</UL>

<P><STRONG><a name="[15a]"></a>GetPowerWithCurrent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gs_protocol.o(i.GetPowerWithCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
</UL>

<P><STRONG><a name="[f5]"></a>GetTarTemp</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, api.o(i.GetTarTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetTarTemp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[f4]"></a>GetTargetCurrentWithDAC</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, api.o(i.GetTargetCurrentWithDAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTargetCurrentWithDAC &rArr; readDAC
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[f6]"></a>GetTemp</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, api.o(i.GetTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = GetTemp &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
</UL>

<P><STRONG><a name="[150]"></a>Getbase_LDI_ADC</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, api.o(i.Getbase_LDI_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = Getbase_LDI_ADC &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[151]"></a>Getbase_LDI_DAC</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, api.o(i.Getbase_LDI_DAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = Getbase_LDI_DAC &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[152]"></a>HmiCancel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gs_protocol.o(i.HmiCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HmiCancel &rArr; writePreTemtoFlash &rArr; writePreTem &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreTemtoFlash
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreCurtoFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[155]"></a>HmiLoad</STRONG> (Thumb, 918 bytes, Stack size 32 bytes, gs_protocol.o(i.HmiLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = HmiLoad &rArr; rqtSLDI &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLanguagefromFlash
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerWithCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[15b]"></a>I2CSendByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, i2c_ctrl.o(i.I2CSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CSendByte &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
</UL>

<P><STRONG><a name="[15d]"></a>I2CStart</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c_ctrl.o(i.I2CStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CStart &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
</UL>

<P><STRONG><a name="[15e]"></a>I2CStop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c_ctrl.o(i.I2CStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CStop &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[15f]"></a>I2CWaitAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c_ctrl.o(i.I2CWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CWaitAck &rArr; I2CStop &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBitIn
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
</UL>

<P><STRONG><a name="[161]"></a>InitTherm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thermostat.o(i.InitTherm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = InitTherm &rArr; initThermoPara &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initThermoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[163]"></a>InitTime</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, time.o(i.InitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = InitTime &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[106]"></a>LDD_SetClockConfiguration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_cm.o(i.LDD_SetClockConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>

<P><STRONG><a name="[ed]"></a>LDstatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, api.o(i.LDstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LDstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[fd]"></a>LDswitch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api.o(i.LDswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LDswitch &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_service_routine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongWrite
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
</UL>

<P><STRONG><a name="[19]"></a>MY_FLEXCAN_ISR</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, can_ctrl.o(i.MY_FLEXCAN_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MY_FLEXCAN_ISR &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_ctrl.o(i.canInit_Task)
<LI> can_ctrl.o(i.Rx_Task)
</UL>
<P><STRONG><a name="[114]"></a>NEXT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.NEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NEXT
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearElement
</UL>

<P><STRONG><a name="[218]"></a>PE_low_level_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_cm.o(i.PE_low_level_init))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_low_level_init
</UL>

<P><STRONG><a name="[13f]"></a>PORT_PinMuxConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(i.PORT_PinMuxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[148]"></a>PORT_PinOpenDrainConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(i.PORT_PinOpenDrainConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinOpenDrainConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[147]"></a>PORT_PinPullConfig</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gpio.o(i.PORT_PinPullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinPullConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[169]"></a>ProcessMsg</STRONG> (Thumb, 1200 bytes, Stack size 64 bytes, gs_protocol.o(i.ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = ProcessMsg &rArr; rqtwReg &rArr; writeReg &rArr; SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyQ
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearElement
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrongFormat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTMSswitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTECswitch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSL
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSBWThermo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSAUTO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinfor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQSN
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPM
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQDIRswitch
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQCRC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQAUTO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtAPSyncLD
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noIdentify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTM
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSN
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSES
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQES
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPM
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCR
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCancel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCerror
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUARTMsg
</UL>

<P><STRONG><a name="[85]"></a>ProcessUARTMsg</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gs_protocol.o(i.ProcessUARTMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = ProcessUARTMsg &rArr; ProcessMsg &rArr; rqtwReg &rArr; writeReg &rArr; SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[307]"></a>ReadByteFromEEprom</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eeprom.o(i.ReadByteFromEEprom))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initThermoPara
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQDIRswitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQES
</UL>

<P><STRONG><a name="[145]"></a>ReadFlashEEprom</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeprom.o(i.ReadFlashEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEEprom_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>

<P><STRONG><a name="[32e]"></a>ReadFlexmem</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, flash_rw.o(i.ReadFlexmem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[308]"></a>ReadFloatFromEEprom</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, eeprom.o(i.ReadFloatFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadFloatFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
</UL>

<P><STRONG><a name="[156]"></a>ReadIntFromEEprom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom.o(i.ReadIntFromEEprom))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initThermoPara
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKd
</UL>

<P><STRONG><a name="[31c]"></a>ReadStrFromEEprom</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, eeprom.o(i.ReadStrFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQSN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPM
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
</UL>

<P><STRONG><a name="[1b3]"></a>Rx_Task</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, can_ctrl.o(i.Rx_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = Rx_Task &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize_mailbox
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Activate_mailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[83]"></a>Rx_reg_Task</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, can_ctrl.o(i.Rx_reg_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = Rx_reg_Task &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Unlock_mailbox
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Rx_message
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Lock_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>Rx_state_Task</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, can_ctrl.o(i.Rx_state_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = Rx_state_Task &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Unlock_mailbox
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Rx_message
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Lock_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>SendStr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gs_protocol.o(i.SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrongFormat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTMSswitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTECswitch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSL
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSBWThermo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSAUTO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQSN
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPM
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQDIRswitch
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQCRC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQAUTO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtAPSyncLD
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraOverRange
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noIdentify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTM
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSN
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSES
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQES
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPM
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getver
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCerror
</UL>

<P><STRONG><a name="[10c]"></a>SingleRead</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, api.o(i.SingleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = SingleRead &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHardID
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjB
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjA
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPreTem
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPreCur
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMAC
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDevCanID
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[10d]"></a>SingleWrite</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, api.o(i.SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeADS_Cfg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Tx_mailbox
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeWorkMode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjB
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjA
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreTem
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreCur
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMAC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKi
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDevCanID
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBW_Thermo
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
</UL>

<P><STRONG><a name="[1ce]"></a>SwitchLanguage</STRONG> (Thumb, 694 bytes, Stack size 8 bytes, gs_protocol.o(i.SwitchLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = SwitchLanguage &rArr; hmi_end &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSL
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQL
</UL>

<P><STRONG><a name="[102]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, system_mk64f12.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>

<P><STRONG><a name="[1b4]"></a>TECswitch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api.o(i.TECswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TECswitch &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTECswitch
</UL>

<P><STRONG><a name="[1cf]"></a>THOswitch</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, api.o(i.THOswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = THOswitch &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTMSswitch
</UL>

<P><STRONG><a name="[84]"></a>Tx_Task</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, can_ctrl.o(i.Tx_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = Tx_Task &rArr; GetTemp &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Tx_mailbox
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Update_message
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize_mailbox
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Activate_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>UART_SendByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gs_protocol.o(i.UART_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_send
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
</UL>

<P><STRONG><a name="[1cc]"></a>WriteByteFromEEprom</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, eeprom.o(i.WriteByteFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSAUTO
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtAPSyncLD
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSES
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
</UL>

<P><STRONG><a name="[33c]"></a>WriteFlexmem</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, flash_rw.o(i.WriteFlexmem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEEPROM
</UL>

<P><STRONG><a name="[1d1]"></a>WriteFloatFromEEprom</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, eeprom.o(i.WriteFloatFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
</UL>

<P><STRONG><a name="[1d2]"></a>WriteIntFromEEprom</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(i.WriteIntFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
</UL>

<P><STRONG><a name="[1d3]"></a>WriteStrFromEEprom</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eeprom.o(i.WriteStrFromEEprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = WriteStrFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTM
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSN
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPM
</UL>

<P><STRONG><a name="[1d4]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpara
</UL>

<P><STRONG><a name="[1d5]"></a>__hardfp_ldexp</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[1d9]"></a>__hardfp_modf</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[1d8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[e0]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[e6]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2c]"></a>_adc_close</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, adc.o(i._adc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _adc_close &rArr; _adc_hw_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_stop
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_deinit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_deinit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_deinit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[1e5]"></a>_adc_hw_channel_deinit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, adc_kadc.o(i._adc_hw_channel_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _adc_hw_channel_deinit &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[1e9]"></a>_adc_hw_channel_init</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, adc_kadc.o(i._adc_hw_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _adc_hw_channel_init &rArr; _bsp_adc_channel_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_channel_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[1e1]"></a>_adc_hw_deinit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_kadc.o(i._adc_hw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _adc_hw_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[1eb]"></a>_adc_hw_init</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, adc_kadc.o(i._adc_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _adc_hw_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[25f]"></a>_adc_hw_install</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_kadc.o(i._adc_hw_install))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
</UL>

<P><STRONG><a name="[1ee]"></a>_adc_hw_ioctl</STRONG> (Thumb, 772 bytes, Stack size 48 bytes, adc_kadc.o(i._adc_hw_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_calibration_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[29]"></a>_adc_ioctl</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, adc.o(i._adc_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _adc_ioctl &rArr; _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_trigger
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_stop
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_resume
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_pause
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[2d]"></a>_adc_open</STRONG> (Thumb, 860 bytes, Stack size 64 bytes, adc.o(i._adc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _adc_open &rArr; _adc_ioctl &rArr; _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_deinit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[2b]"></a>_adc_read</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, adc.o(i._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[2a]"></a>_adc_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i._adc_write))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[1e4]"></a>_adt_hw_channel_deinit</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_hw_channel_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_hw_channel_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[1fa]"></a>_adt_hw_channel_init</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, adt_kpdb.o(i._adt_hw_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _adt_hw_channel_init &rArr; adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[1e0]"></a>_adt_hw_deinit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adt_kpdb.o(i._adt_hw_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[1f8]"></a>_adt_hw_init</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, adt_kpdb.o(i._adt_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _adt_hw_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[260]"></a>_adt_hw_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adt_kpdb.o(i._adt_hw_install))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
</UL>

<P><STRONG><a name="[1f6]"></a>_adt_hw_ioctl</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, adt_kpdb.o(i._adt_hw_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _adt_hw_ioctl &rArr; adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[1f4]"></a>_adt_pause</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[1fd]"></a>_adt_process_data</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, adt_kpdb.o(i._adt_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>

<P><STRONG><a name="[1f5]"></a>_adt_resume</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[1e3]"></a>_adt_stop</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[1f3]"></a>_adt_trigger</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[1fe]"></a>_allocate_sector_cache</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flashx.o(i._allocate_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _allocate_sector_cache &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
</UL>

<P><STRONG><a name="[1ea]"></a>_bsp_adc_channel_io_init</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_adc_channel_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_adc_channel_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
</UL>

<P><STRONG><a name="[1ec]"></a>_bsp_adc_io_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_adc_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
</UL>

<P><STRONG><a name="[234]"></a>_bsp_dspi_io_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, init_gpio.o(i._bsp_dspi_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_dspi_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[2f4]"></a>_bsp_edma_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_edma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
</UL>

<P><STRONG><a name="[24a]"></a>_bsp_esdhc_io_init</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_esdhc_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_esdhc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>

<P><STRONG><a name="[201]"></a>_bsp_flexcan_io_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, init_gpio.o(i._bsp_flexcan_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _bsp_flexcan_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_flexcan_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[2fc]"></a>_bsp_ftfx_io_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_ftfx_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_init
</UL>

<P><STRONG><a name="[1e6]"></a>_bsp_get_adc_base_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc_mk64.o(i._bsp_get_adc_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_calibration_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>

<P><STRONG><a name="[22b]"></a>_bsp_get_clock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_get_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_get_clock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_get_mclk_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_setparam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_ioctl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_setparam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_ioctl
</UL>

<P><STRONG><a name="[202]"></a>_bsp_get_clock_configuration</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_cm.o(i._bsp_get_clock_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _bsp_get_clock_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetClockConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cm_get_clock_configuration
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_get_mclk_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_setparam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_ioctl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_setparam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_ioctl
</UL>

<P><STRONG><a name="[233]"></a>_bsp_get_dspi_base_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_mk64.o(i._bsp_get_dspi_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[22d]"></a>_bsp_get_dspi_vectors</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi_mk64.o(i._bsp_get_dspi_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
</UL>

<P><STRONG><a name="[2f2]"></a>_bsp_get_edma_done_vectors</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_get_edma_done_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>

<P><STRONG><a name="[2f3]"></a>_bsp_get_edma_error_vectors</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_get_edma_error_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>

<P><STRONG><a name="[24c]"></a>_bsp_get_esdhc_base_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esdhc_mk64.o(i._bsp_get_esdhc_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[24d]"></a>_bsp_get_esdhc_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esdhc_mk64.o(i._bsp_get_esdhc_vector))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[124]"></a>_bsp_get_flexcan_base_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flexcan_mk64.o(i._bsp_get_flexcan_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Tx_mailbox
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_flexcan_io_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Update_message
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Unlock_mailbox
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Softreset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Set_global_stdmask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Select_mode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Rx_message
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Lock_mailbox
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_err_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_boff_int
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize_mailbox
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Error_int_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Activate_mailbox
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_disable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Select_clk
</UL>

<P><STRONG><a name="[126]"></a>_bsp_get_flexcan_vector</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flexcan_mk64.o(i._bsp_get_flexcan_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_get_flexcan_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_err_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_boff_int
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Error_int_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_disable
</UL>

<P><STRONG><a name="[2fd]"></a>_bsp_get_ftfe_address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_mk64.o(i._bsp_get_ftfe_address))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_init
</UL>

<P><STRONG><a name="[1d]"></a>_bsp_get_hwticks</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, init_bsp.o(i._bsp_get_hwticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _bsp_get_hwticks &rArr; hwtimer_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_bsp.o(i._bsp_pre_init)
</UL>
<P><STRONG><a name="[28d]"></a>_bsp_get_i2c_base_address</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_mk64.o(i._bsp_get_i2c_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[28c]"></a>_bsp_get_i2c_vector</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_mk64.o(i._bsp_get_i2c_vector))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
</UL>

<P><STRONG><a name="[295]"></a>_bsp_get_sai_base_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[298]"></a>_bsp_get_sai_dma_channel_mask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_dma_channel_mask))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[29e]"></a>_bsp_get_sai_rx_dma_source</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_rx_dma_source))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[29a]"></a>_bsp_get_sai_rx_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_rx_vector))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[29d]"></a>_bsp_get_sai_tx_dma_source</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_tx_dma_source))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[299]"></a>_bsp_get_sai_tx_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_tx_vector))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[2a3]"></a>_bsp_get_serial_base_address</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serl_mk64.o(i._bsp_get_serial_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[31e]"></a>_bsp_gpio_io_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_gpio_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[28e]"></a>_bsp_i2c_io_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, init_gpio.o(i._bsp_i2c_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_i2c_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[205]"></a>_bsp_init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, init_bsp.o(i._bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _bsp_init &rArr; _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_rtc_io_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_install
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_install
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_install
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_install
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_install
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_install
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[215]"></a>_bsp_initialize_hardware</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_initialize_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_watchdog_disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[217]"></a>_bsp_low_level_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_cm.o(i._bsp_low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _bsp_low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[219]"></a>_bsp_osc_autotrim</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_osc_autotrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _bsp_osc_autotrim &rArr; CPU_MCGAutoTrim
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_MCGAutoTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2ca]"></a>_bsp_post_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inittask.o(i._bsp_post_init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[21b]"></a>_bsp_pre_init</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, init_bsp.o(i._bsp_pre_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _bsp_pre_init &rArr; _psp_int_init &rArr; _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_callback_reg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_start
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_get_modulo
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_deinit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_ticks_per_sec
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwticks_per_tick
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwtick_function
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_osc_autotrim
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_low_level_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kinetis_mpu_disable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_vector_table
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_system_pool_id
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_cpu_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[208]"></a>_bsp_rtc_io_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_rtc_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[296]"></a>_bsp_sai_io_init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_sai_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[29f]"></a>_bsp_serial_io_init</STRONG> (Thumb, 468 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_serial_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_serial_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_deinit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_enable
</UL>

<P><STRONG><a name="[2a9]"></a>_bsp_serial_irda_rx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_irda_rx_init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[2a8]"></a>_bsp_serial_irda_tx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_irda_tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[2a7]"></a>_bsp_serial_rts_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_rts_init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[224]"></a>_bsp_set_clock_configuration</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_cm.o(i._bsp_set_clock_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _bsp_set_clock_configuration &rArr; hwtimer_set_freq &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[1c]"></a>_bsp_systimer_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_bsp.o(i._bsp_systimer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _bsp_systimer_callback &rArr; _time_notify_kernel &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_bsp.o(i._bsp_pre_init)
</UL>
<P><STRONG><a name="[216]"></a>_bsp_watchdog_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init_hw.o(i._bsp_watchdog_disable))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
</UL>

<P><STRONG><a name="[12c]"></a>_cm_get_clock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cm.o(i._cm_get_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _cm_get_clock &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
</UL>

<P><STRONG><a name="[12b]"></a>_cm_get_clock_configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cm.o(i._cm_get_clock_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _cm_get_clock_configuration &rArr; _bsp_get_clock_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
</UL>

<P><STRONG><a name="[23e]"></a>_dspi_ctar_params</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, spi_dspi_common.o(i._dspi_ctar_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _dspi_ctar_params
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_setparam
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_setparam
</UL>

<P><STRONG><a name="[22c]"></a>_dspi_deinit_low</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_dspi_common.o(i._dspi_deinit_low))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_deinit
</UL>

<P><STRONG><a name="[23d]"></a>_dspi_find_baudrate</STRONG> (Thumb, 302 bytes, Stack size 60 bytes, spi_dspi_common.o(i._dspi_find_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _dspi_find_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_setparam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_ioctl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_setparam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_ioctl
</UL>

<P><STRONG><a name="[236]"></a>_dspi_init_low</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spi_dspi_common.o(i._dspi_init_low))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[25]"></a>_esdhc_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _esdhc_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[211]"></a>_esdhc_install</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, esdhc.o(i._esdhc_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _esdhc_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_esdhc_vector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_esdhc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[22]"></a>_esdhc_ioctl</STRONG> (Thumb, 800 bytes, Stack size 72 bytes, esdhc.o(i._esdhc_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _esdhc_ioctl &rArr; _esdhc_get_card_type &rArr; _esdhc_send_command &rArr; _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_is_running
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[26]"></a>_esdhc_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _esdhc_open &rArr; _esdhc_init &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[24]"></a>_esdhc_read</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, esdhc.o(i._esdhc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _esdhc_read &rArr; _esdhc_send_command &rArr; _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[21]"></a>_esdhc_uninstall</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _esdhc_uninstall &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[23]"></a>_esdhc_write</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, esdhc.o(i._esdhc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _esdhc_write &rArr; _esdhc_send_command &rArr; _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[27]"></a>_int_default_isr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, int.o(i._int_default_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _int_default_isr &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> int.o(i._int_init)
<LI> int.o(i._int_install_isr)
</UL>
<P><STRONG><a name="[1e7]"></a>_int_disable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, int.o(i._int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_unexpected_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_get_time
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_close
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_get_time
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_close
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_read
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_putc_internal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_ioctl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_close
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_open
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_close
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_close
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[1e8]"></a>_int_enable</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, int.o(i._int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_unexpected_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_get_time
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_close
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_get_time
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_close
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_read
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_putc_internal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_ioctl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_close
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_open
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_close
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_close
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[22f]"></a>_int_get_default_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(i._int_get_default_isr))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_deinit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
</UL>

<P><STRONG><a name="[2a2]"></a>_int_get_exception_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, int.o(i._int_get_exception_handler))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_init
</UL>

<P><STRONG><a name="[1ed]"></a>_int_get_isr_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, int.o(i._int_get_isr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _int_get_isr_data &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
</UL>

<P><STRONG><a name="[25c]"></a>_int_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, int.o(i._int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[25e]"></a>_int_install_default_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, int.o(i._int_install_default_isr))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_unexpected_isr
</UL>

<P><STRONG><a name="[131]"></a>_int_install_isr</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, int.o(i._int_install_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscmp_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_err_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_boff_int
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_deinit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_deinit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_deinit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
</UL>

<P><STRONG><a name="[25d]"></a>_int_install_unexpected_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int.o(i._int_install_unexpected_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _int_install_unexpected_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_default_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[21f]"></a>_int_set_vector_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, int_vtab.o(i._int_set_vector_table))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[28]"></a>_int_unexpected_isr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, int_unx.o(i._int_unexpected_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _int_unexpected_isr &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(i._int_install_unexpected_isr)
</UL>
<P><STRONG><a name="[20f]"></a>_io_adc_install</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, adc.o(i._io_adc_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _io_adc_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_install
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_install
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[262]"></a>_io_cvt</STRONG> (Thumb, 760 bytes, Stack size 96 bytes, io_fp.o(i._io_cvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[261]"></a>_io_dev_install</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, io_inst.o(i._io_dev_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_install
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
</UL>

<P><STRONG><a name="[24f]"></a>_io_dev_install_ext</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, io_instx.o(i._io_dev_install_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_install
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_install
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
</UL>

<P><STRONG><a name="[268]"></a>_io_doprint</STRONG> (Thumb, 3174 bytes, Stack size 520 bytes, io_dopr.o(i._io_doprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt64
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_putstr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_mputc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
</UL>

<P><STRONG><a name="[26a]"></a>_io_doprint_prt</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, io_dopr.o(i._io_doprint_prt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_doprint_prt
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[269]"></a>_io_doprint_prt64</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, io_dopr.o(i._io_doprint_prt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _io_doprint_prt64 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[272]"></a>_io_dtoa</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, io_fp.o(i._io_dtoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _io_dtoa
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[26d]"></a>_io_dtoe</STRONG> (Thumb, 238 bytes, Stack size 376 bytes, io_fp.o(i._io_dtoe))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _io_dtoe &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoa
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[26c]"></a>_io_dtof</STRONG> (Thumb, 282 bytes, Stack size 376 bytes, io_fp.o(i._io_dtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _io_dtof &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[26b]"></a>_io_dtog</STRONG> (Thumb, 586 bytes, Stack size 400 bytes, io_fp.o(i._io_dtog))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoa
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[273]"></a>_io_fflush</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, io_fflsh.o(i._io_fflush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_fflush &rArr; _io_fseek
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_send
</UL>

<P><STRONG><a name="[27b]"></a>_io_flashx_check_free_space</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flashx.o(i._io_flashx_check_free_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _io_flashx_check_free_space
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
</UL>

<P><STRONG><a name="[32]"></a>_io_flashx_close</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, flashx.o(i._io_flashx_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _io_flashx_close &rArr; _io_flashx_flush_buffer &rArr; _io_flashx_flush_sector_buffer &rArr; _io_flashx_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[277]"></a>_io_flashx_erase_sector</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, flashx.o(i._io_flashx_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_flashx_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_sector_buffer
</UL>

<P><STRONG><a name="[278]"></a>_io_flashx_find_correct_sectors</STRONG> (Thumb, 292 bytes, Stack size 52 bytes, flashx.o(i._io_flashx_find_correct_sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _io_flashx_find_correct_sectors
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_ioctl
</UL>

<P><STRONG><a name="[275]"></a>_io_flashx_flush_buffer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flashx.o(i._io_flashx_flush_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _io_flashx_flush_buffer &rArr; _io_flashx_flush_sector_buffer &rArr; _io_flashx_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_sector_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_ioctl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_close
</UL>

<P><STRONG><a name="[276]"></a>_io_flashx_flush_sector_buffer</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, flashx.o(i._io_flashx_flush_sector_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _io_flashx_flush_sector_buffer &rArr; _io_flashx_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_ioctl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_buffer
</UL>

<P><STRONG><a name="[212]"></a>_io_flashx_install</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, flashx.o(i._io_flashx_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _io_flashx_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2f]"></a>_io_flashx_ioctl</STRONG> (Thumb, 1222 bytes, Stack size 88 bytes, flashx.o(i._io_flashx_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _io_flashx_ioctl &rArr; _io_flashx_flush_buffer &rArr; _io_flashx_flush_sector_buffer &rArr; _io_flashx_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_sector_buffer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_buffer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_find_correct_sectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[33]"></a>_io_flashx_open</STRONG> (Thumb, 570 bytes, Stack size 80 bytes, flashx.o(i._io_flashx_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _io_flashx_open &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[31]"></a>_io_flashx_read</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, flashx.o(i._io_flashx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _io_flashx_read &rArr; _io_flashx_flush_buffer &rArr; _io_flashx_flush_sector_buffer &rArr; _io_flashx_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_buffer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_find_correct_sectors
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[2e]"></a>_io_flashx_uninstall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flashx.o(i._io_flashx_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _io_flashx_uninstall &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[30]"></a>_io_flashx_write</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, flashx.o(i._io_flashx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _io_flashx_write &rArr; _io_flashx_write_partial_sector &rArr; _allocate_sector_cache &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_find_correct_sectors
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_erase_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashx.o(i._io_flashx_install)
</UL>
<P><STRONG><a name="[27a]"></a>_io_flashx_write_partial_sector</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, flashx.o(i._io_flashx_write_partial_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _io_flashx_write_partial_sector &rArr; _allocate_sector_cache &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_flush_buffer
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_erase_sector
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_check_free_space
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allocate_sector_cache
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write
</UL>

<P><STRONG><a name="[27c]"></a>_io_fopen</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, io_fopen.o(i._io_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _io_fopen &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
</UL>

<P><STRONG><a name="[40]"></a>_io_fputc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, io_fputc.o(i._io_fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_pntf.o(i._io_printf)
</UL>
<P><STRONG><a name="[274]"></a>_io_fseek</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, io_fseek.o(i._io_fseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fflush
</UL>

<P><STRONG><a name="[280]"></a>_io_get_handle</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, io_ghand.o(i._io_get_handle))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
</UL>

<P><STRONG><a name="[38]"></a>_io_i2c_int_close</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_i2c_int_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[27d]"></a>_io_i2c_int_install</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, i2c_int.o(i._io_i2c_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _io_i2c_int_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_install
</UL>

<P><STRONG><a name="[35]"></a>_io_i2c_int_ioctl</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_int.o(i._io_i2c_int_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_int_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[39]"></a>_io_i2c_int_open</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_int.o(i._io_i2c_int_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_i2c_int_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[37]"></a>_io_i2c_int_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_int_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[34]"></a>_io_i2c_int_uninstall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_int.o(i._io_i2c_int_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _io_i2c_int_uninstall &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[36]"></a>_io_i2c_int_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_int_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[3e]"></a>_io_i2c_polled_close</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_i2c_polled_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[27e]"></a>_io_i2c_polled_install</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, i2c_pol.o(i._io_i2c_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _io_i2c_polled_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_install
</UL>

<P><STRONG><a name="[3b]"></a>_io_i2c_polled_ioctl</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_pol.o(i._io_i2c_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_polled_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[3f]"></a>_io_i2c_polled_open</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, i2c_pol.o(i._io_i2c_polled_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_i2c_polled_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[3d]"></a>_io_i2c_polled_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_polled_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[3a]"></a>_io_i2c_polled_uninstall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_pol.o(i._io_i2c_polled_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _io_i2c_polled_uninstall &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[3c]"></a>_io_i2c_polled_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_polled_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[207]"></a>_io_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, io_init.o(i._io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _io_init &rArr; _lwsem_create &rArr; _lwsem_create_internal &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[339]"></a>_io_ioctl</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, io_ioctl.o(i._io_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[fb]"></a>_io_printf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, io_pntf.o(i._io_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_get_handle
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer1_callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[337]"></a>_io_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, io_read.o(i._io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_rec_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_rec_task
</UL>

<P><STRONG><a name="[45]"></a>_io_sai_int_close</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sai_int.o(i._io_sai_int_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_sai_int_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[213]"></a>_io_sai_int_install</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sai_int.o(i._io_sai_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _io_sai_int_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[42]"></a>_io_sai_int_ioctl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sai_int.o(i._io_sai_int_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_sai_int_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[46]"></a>_io_sai_int_open</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, sai_int.o(i._io_sai_int_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _io_sai_int_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[44]"></a>_io_sai_int_read</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sai_int.o(i._io_sai_int_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_sai_int_read &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[41]"></a>_io_sai_int_uninstall</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sai_int.o(i._io_sai_int_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_sai_int_uninstall &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[43]"></a>_io_sai_int_write</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sai_int.o(i._io_sai_int_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_sai_int_write &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_int.o(i._io_sai_int_install)
</UL>
<P><STRONG><a name="[214]"></a>_io_serial_default_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, io_sinit.o(i._io_serial_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _io_serial_default_init &rArr; _io_fopen &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[281]"></a>_io_serial_int_addc</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, serl_int.o(i._io_serial_int_addc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_addc &rArr; _taskq_resume &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_rx_tx_isr
</UL>

<P><STRONG><a name="[4a]"></a>_io_serial_int_close</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, serl_int.o(i._io_serial_int_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_close &rArr; _taskq_destroy &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int.o(i._io_serial_int_install)
</UL>
<P><STRONG><a name="[284]"></a>_io_serial_int_install</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, serl_int.o(i._io_serial_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_install
</UL>

<P><STRONG><a name="[47]"></a>_io_serial_int_ioctl</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, serl_int.o(i._io_serial_int_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_ioctl &rArr; _taskq_suspend &rArr; _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int.o(i._io_serial_int_install)
</UL>
<P><STRONG><a name="[286]"></a>_io_serial_int_nextc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, serl_int.o(i._io_serial_int_nextc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_nextc &rArr; _taskq_resume &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_rx_tx_isr
</UL>

<P><STRONG><a name="[4b]"></a>_io_serial_int_open</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, serl_int.o(i._io_serial_int_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_open &rArr; _taskq_create &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int.o(i._io_serial_int_install)
</UL>
<P><STRONG><a name="[288]"></a>_io_serial_int_putc_internal</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, serl_int.o(i._io_serial_int_putc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_putc_internal &rArr; _taskq_suspend &rArr; _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_read
</UL>

<P><STRONG><a name="[49]"></a>_io_serial_int_read</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, serl_int.o(i._io_serial_int_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_read &rArr; _io_serial_int_putc_internal &rArr; _taskq_suspend &rArr; _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_putc_internal
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int.o(i._io_serial_int_install)
</UL>
<P><STRONG><a name="[48]"></a>_io_serial_int_write</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, serl_int.o(i._io_serial_int_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _io_serial_int_write &rArr; _io_serial_int_putc_internal &rArr; _taskq_suspend &rArr; _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_putc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int.o(i._io_serial_int_install)
</UL>
<P><STRONG><a name="[4f]"></a>_io_serial_polled_close</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serl_pol.o(i._io_serial_polled_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _io_serial_polled_close &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[289]"></a>_io_serial_polled_install</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, serl_pol.o(i._io_serial_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_install
</UL>

<P><STRONG><a name="[4c]"></a>_io_serial_polled_ioctl</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, serl_pol.o(i._io_serial_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_serial_polled_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[50]"></a>_io_serial_polled_open</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, serl_pol.o(i._io_serial_polled_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _io_serial_polled_open &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[4e]"></a>_io_serial_polled_read</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, serl_pol.o(i._io_serial_polled_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_serial_polled_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[4d]"></a>_io_serial_polled_write</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, serl_pol.o(i._io_serial_polled_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_serial_polled_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[20e]"></a>_io_spi_install</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, spi.o(i._io_spi_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _io_spi_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[110]"></a>_io_sprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, io_spr.o(i._io_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = _io_sprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrongFormat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTMSswitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTECswitch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSL
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSBWThermo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSAUTO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKi
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQKd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQCRC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQAUTO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtAPSyncLD
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraOverRange
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noIdentify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSES
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQES
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
</UL>

<P><STRONG><a name="[57]"></a>_io_sputc</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, io_spr.o(i._io_sputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _io_sputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_spr.o(i._io_sprintf)
</UL>
<P><STRONG><a name="[338]"></a>_io_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, io_write.o(i._io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_send
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_send
</UL>

<P><STRONG><a name="[df]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5c]"></a>_ki2c_int_deinit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c_int_ki2c.o(i._ki2c_int_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[5d]"></a>_ki2c_int_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ki2c_int_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_i2c_vector
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[20d]"></a>_ki2c_int_install</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, i2c_int_ki2c.o(i._ki2c_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_install &rArr; _io_i2c_int_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[5b]"></a>_ki2c_int_rx</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_rx &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[5a]"></a>_ki2c_int_tx</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_tx &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[60]"></a>_ki2c_polled_deinit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c_pol_ki2c.o(i._ki2c_polled_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ki2c_polled_deinit &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[61]"></a>_ki2c_polled_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_polled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ki2c_polled_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_i2c_io_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_i2c_base_address
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[20c]"></a>_ki2c_polled_install</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _ki2c_polled_install &rArr; _io_i2c_polled_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[59]"></a>_ki2c_polled_ioctl</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, i2c_pol_ki2c.o(i._ki2c_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ki2c_polled_ioctl &rArr; _ki2c_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_set_baudrate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
<LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[5f]"></a>_ki2c_polled_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, i2c_pol_ki2c.o(i._ki2c_polled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ki2c_polled_rx &rArr; _ki2c_polled_rx_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[5e]"></a>_ki2c_polled_tx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, i2c_pol_ki2c.o(i._ki2c_polled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ki2c_polled_tx &rArr; _ki2c_polled_rx_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[291]"></a>_ki2s_find_mclk_freq_div</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, sai_dma_ksai.o(i._ki2s_find_mclk_freq_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ki2s_find_mclk_freq_div &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
</UL>

<P><STRONG><a name="[29c]"></a>_ki2s_set_bclk_mode</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, sai_dma_ksai.o(i._ki2s_set_bclk_mode))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
</UL>

<P><STRONG><a name="[293]"></a>_ki2s_set_master_mode</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, sai_dma_ksai.o(i._ki2s_set_master_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ki2s_set_master_mode &rArr; _ki2s_get_mclk_value &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_get_mclk_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[29b]"></a>_ki2s_set_slave_mode</STRONG> (Thumb, 348 bytes, Stack size 12 bytes, sai_dma_ksai.o(i._ki2s_set_slave_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ki2s_set_slave_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[229]"></a>_kinetis_mpu_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kinetis_mpu.o(i._kinetis_mpu_disable))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[99]"></a>_ksai_dma_deinit</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _ksai_dma_deinit &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_disable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>_ksai_dma_init</STRONG> (Thumb, 838 bytes, Stack size 104 bytes, sai_dma_ksai.o(i._ksai_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _ksai_dma_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_sai_io_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_claim
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_callback_reg
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_tx_vector
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_rx_vector
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_dma_channel_mask
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_base_address
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_get_mclk_value
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>_ksai_dma_ioctl</STRONG> (Thumb, 3464 bytes, Stack size 80 bytes, sai_dma_ksai.o(i._ksai_dma_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _ksai_dma_ioctl &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_submit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_reg2mem
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_mem2reg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_source
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_enable
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_setup
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_tx_dma_source
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_rx_dma_source
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_slave_mode
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_master_mode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_bclk_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_get_mclk_value
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>_ksai_hw_init</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, sai_dma_ksai.o(i._ksai_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ksai_hw_init &rArr; _ki2s_find_mclk_freq_div &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_bclk_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[64]"></a>_ksai_rx_dma_irq_handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_rx_dma_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ksai_rx_dma_irq_handler &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[65]"></a>_ksai_rx_fifoerr_irq_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sai_dma_ksai.o(i._ksai_rx_fifoerr_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ksai_rx_fifoerr_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[62]"></a>_ksai_tx_dma_irq_handler</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_tx_dma_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ksai_tx_dma_irq_handler &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[63]"></a>_ksai_tx_fifoerr_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sai_dma_ksai.o(i._ksai_tx_fifoerr_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ksai_tx_fifoerr_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[2a4]"></a>_kuart_change_baudrate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, serl_pol_kuart.o(i._kuart_change_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _kuart_change_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[6a]"></a>_kuart_int_deinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serl_int_kuart.o(i._kuart_int_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _kuart_int_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_install)
</UL>
<P><STRONG><a name="[6b]"></a>_kuart_int_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, serl_int_kuart.o(i._kuart_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _kuart_int_enable &rArr; _bsp_serial_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_io_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_peripheral_enable
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_peripheral_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_install)
</UL>
<P><STRONG><a name="[66]"></a>_kuart_int_err_isr</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, serl_int_kuart.o(i._kuart_int_err_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _kuart_int_err_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_init)
</UL>
<P><STRONG><a name="[6c]"></a>_kuart_int_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, serl_int_kuart.o(i._kuart_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _kuart_int_init &rArr; _kuart_polled_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_exception_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_install)
</UL>
<P><STRONG><a name="[20b]"></a>_kuart_int_install</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, serl_int_kuart.o(i._kuart_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _kuart_int_install &rArr; _io_serial_int_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[69]"></a>_kuart_int_putc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, serl_int_kuart.o(i._kuart_int_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _kuart_int_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_install)
</UL>
<P><STRONG><a name="[67]"></a>_kuart_int_rx_tx_isr</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, serl_int_kuart.o(i._kuart_int_rx_tx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _kuart_int_rx_tx_isr &rArr; _io_serial_int_addc &rArr; _taskq_resume &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_nextc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_addc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_int_kuart.o(i._kuart_int_init)
</UL>
<P><STRONG><a name="[70]"></a>_kuart_polled_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serl_pol_kuart.o(i._kuart_polled_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _kuart_polled_deinit &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_io_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[6f]"></a>_kuart_polled_getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_getc))
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[71]"></a>_kuart_polled_init</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, serl_pol_kuart.o(i._kuart_polled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _kuart_polled_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_io_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_peripheral_enable
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_peripheral_disable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_serial_base_address
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_change_baudrate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[20a]"></a>_kuart_polled_install</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, serl_pol_kuart.o(i._kuart_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[68]"></a>_kuart_polled_ioctl</STRONG> (Thumb, 1054 bytes, Stack size 32 bytes, serl_pol_kuart.o(i._kuart_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _kuart_polled_ioctl &rArr; _kuart_change_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_rts_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_irda_tx_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_irda_rx_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_change_baudrate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serl_int_kuart.o(i._kuart_int_install)
<LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[6e]"></a>_kuart_polled_putc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_putc))
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[6d]"></a>_kuart_polled_status</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, serl_pol_kuart.o(i._kuart_polled_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _kuart_polled_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[210]"></a>_lwadc_init</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, lwadc_kadc.o(i._lwadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lwadc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2aa]"></a>_lwadc_init_input</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lwadc_kadc.o(i._lwadc_init_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lwadc_init_input &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_restart
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_channel_io_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[116]"></a>_lwadc_read_raw</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwadc_kadc.o(i._lwadc_read_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lwadc_read_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
</UL>

<P><STRONG><a name="[115]"></a>_lwadc_wait_next</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lwadc_kadc.o(i._lwadc_wait_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lwadc_wait_next
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
</UL>

<P><STRONG><a name="[256]"></a>_lwevent_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwevent.o(i._lwevent_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lwevent_clear &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[24e]"></a>_lwevent_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwevent.o(i._lwevent_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lwevent_create &rArr; _lwevent_create_internal &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[2ac]"></a>_lwevent_create_internal</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lwevent.o(i._lwevent_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lwevent_create_internal &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create
</UL>

<P><STRONG><a name="[250]"></a>_lwevent_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwevent.o(i._lwevent_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _lwevent_destroy &rArr; _lwevent_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
</UL>

<P><STRONG><a name="[2ad]"></a>_lwevent_destroy_internal</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lwevent.o(i._lwevent_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _lwevent_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
</UL>

<P><STRONG><a name="[257]"></a>_lwevent_get_signalled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwevent.o(i._lwevent_get_signalled))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[168]"></a>_lwevent_set</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lwevent.o(i._lwevent_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_FLEXCAN_ISR
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_isr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_process_data
</UL>

<P><STRONG><a name="[2b1]"></a>_lwevent_wait_internal</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, lwevent.o(i._lwevent_wait_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _lwevent_wait_internal &rArr; _time_delay_until &rArr; _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
</UL>

<P><STRONG><a name="[10b]"></a>_lwevent_wait_ticks</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lwevent.o(i._lwevent_wait_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_reg_Task
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHandle_Task
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2b5]"></a>_lwmem_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lwmem_alloc &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_init
</UL>

<P><STRONG><a name="[2b7]"></a>_lwmem_alloc_align</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lwmem_alloc_align &rArr; _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_init_ram_function
</UL>

<P><STRONG><a name="[2b8]"></a>_lwmem_alloc_align_internal</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, lwmem.o(i._lwmem_alloc_align_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align
</UL>

<P><STRONG><a name="[21d]"></a>_lwmem_alloc_at</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _lwmem_alloc_at &rArr; _lwmem_alloc_at_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2b9]"></a>_lwmem_alloc_at_internal</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, lwmem.o(i._lwmem_alloc_at_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lwmem_alloc_at_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
</UL>

<P><STRONG><a name="[2b6]"></a>_lwmem_alloc_internal</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, lwmem.o(i._lwmem_alloc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
</UL>

<P><STRONG><a name="[1ff]"></a>_lwmem_alloc_system</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_alloc_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_open
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allocate_sector_cache
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
</UL>

<P><STRONG><a name="[2ba]"></a>_lwmem_alloc_system_align</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_system_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lwmem_alloc_system_align &rArr; _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
</UL>

<P><STRONG><a name="[235]"></a>_lwmem_alloc_system_zero</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_alloc_system_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_install
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_install
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_install
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_open
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[1f7]"></a>_lwmem_alloc_zero</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_alloc_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[2bb]"></a>_lwmem_create_pool</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_create_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lwmem_create_pool &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_init_internal
</UL>

<P><STRONG><a name="[221]"></a>_lwmem_create_pool_mapped</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_create_pool_mapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lwmem_create_pool_mapped &rArr; _lwmem_create_pool &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[1e2]"></a>_lwmem_free</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_deinit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_uninstall
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_deinit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write_partial_sector
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_uninstall
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_open
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_close
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_uninstall
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_uninstall
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_deinit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_deinit_ram_function
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_release
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_uninstall
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_deinit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_close
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[2bc]"></a>_lwmem_get_next_block_internal</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_get_next_block_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lwmem_get_next_block_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[220]"></a>_lwmem_get_system_pool_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_get_system_pool_id))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2bd]"></a>_lwmem_init_internal</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lwmem_init_internal &rArr; _lwmem_create_pool &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[200]"></a>_lwmem_set_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_set_type))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_install
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_open
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allocate_sector_cache
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_open
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
</UL>

<P><STRONG><a name="[2cc]"></a>_lwmem_transfer_internal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_transfer_internal))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[23a]"></a>_lwsem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lwsem_create &rArr; _lwsem_create_internal &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_install
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_install
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[2be]"></a>_lwsem_create_internal</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lwsem.o(i._lwsem_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lwsem_create_internal &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
</UL>

<P><STRONG><a name="[230]"></a>_lwsem_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwsem.o(i._lwsem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_install
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_uninstall
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_uninstall
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_deinit
</UL>

<P><STRONG><a name="[2bf]"></a>_lwsem_destroy_internal</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwsem.o(i._lwsem_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>

<P><STRONG><a name="[242]"></a>_lwsem_poll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lwsem_poll &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[231]"></a>_lwsem_post</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_rec_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_rec_task
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_read
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_isr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_ioctl
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_tx_dma_irq_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_rx_dma_irq_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_ioctl
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_flush
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_isr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_callback
</UL>

<P><STRONG><a name="[1b2]"></a>_lwsem_wait</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUARTMsg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_int_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_flashx_ioctl
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_ioctl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_tx_rx
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[2c1]"></a>_mqx</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, mqx.o(i._mqx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_start_internal
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_init_internal
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c3]"></a>_mqx_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqx.o(i._mqx_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mqx_exit &rArr; _int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[73]"></a>_mqx_idle_task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, idletask.o(i._mqx_idle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_idle_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx.o(i._mqx_init_kernel_data_internal)
</UL>
<P><STRONG><a name="[2c2]"></a>_mqx_init_kernel_data_internal</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, mqx.o(i._mqx_init_kernel_data_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mqx_init_kernel_data_internal &rArr; _mqx_exit &rArr; _int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_set_kernel_disable_level
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[72]"></a>_mqx_init_task</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, inittask.o(i._mqx_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _mqx_init_task &rArr; _bsp_init &rArr; _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_ext &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_post_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx.o(i._mqx_init_kernel_data_internal)
</UL>
<P><STRONG><a name="[21c]"></a>_mqx_set_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx.o(i._mqx_set_cpu_type))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[22e]"></a>_nvic_int_disable</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(i._nvic_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _nvic_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_deinit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_isr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit
</UL>

<P><STRONG><a name="[258]"></a>_nvic_int_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nvic.o(i._nvic_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nvic_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[127]"></a>_nvic_int_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nvic.o(i._nvic_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscmp_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Error_int_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Int_disable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init
</UL>

<P><STRONG><a name="[1de]"></a>_psp_add_element_to_array</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, psp_mat3.o(i._psp_add_element_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psp_add_element_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[2dd]"></a>_psp_add_ticks</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, psp_tiad.o(i._psp_add_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[2cb]"></a>_psp_build_float_context</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stack_bu.o(i._psp_build_float_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_internal
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
</UL>

<P><STRONG><a name="[2cd]"></a>_psp_build_stack_frame</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stack_bu.o(i._psp_build_stack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[2db]"></a>_psp_destroy_stack_frame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stack_de.o(i._psp_destroy_stack_frame))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[1df]"></a>_psp_div_128_by_32</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, psp_mat2.o(i._psp_div_128_by_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[2c5]"></a>_psp_init_readyqs</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sc_irdyq.o(i._psp_init_readyqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _psp_init_readyqs &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[21e]"></a>_psp_int_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psp_iinit.o(i._psp_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _psp_int_init &rArr; _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2ce]"></a>_psp_int_install</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, int_inst.o(i._psp_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _psp_int_install
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[2d0]"></a>_psp_msecs_to_ticks_quick</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, psp_mstiq.o(i._psp_msecs_to_ticks_quick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
</UL>

<P><STRONG><a name="[1dd]"></a>_psp_mul_128_by_32</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, psp_mat1.o(i._psp_mul_128_by_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _psp_mul_128_by_32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[2e1]"></a>_psp_normalize_ticks</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, psp_tinm.o(i._psp_normalize_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
</UL>

<P><STRONG><a name="[2c8]"></a>_psp_set_kernel_disable_level</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, sc_irdyq.o(i._psp_set_kernel_disable_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _psp_set_kernel_disable_level
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
</UL>

<P><STRONG><a name="[2e0]"></a>_psp_subtract_ticks</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, psp_tisu.o(i._psp_subtract_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _psp_subtract_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>

<P><STRONG><a name="[2d1]"></a>_psp_ticks_to_milliseconds</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, psp_tims.o(i._psp_ticks_to_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
</UL>

<P><STRONG><a name="[2ae]"></a>_queue_dequeue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i._queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[267]"></a>_queue_enqueue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i._queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>

<P><STRONG><a name="[27f]"></a>_queue_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(i._queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
</UL>

<P><STRONG><a name="[2d2]"></a>_queue_insert</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i._queue_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_insert_priorityq_internal
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>

<P><STRONG><a name="[209]"></a>_rtc_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, krtc.o(i._rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _rtc_init &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2d3]"></a>_sched_insert_priorityq_internal</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sched.o(i._sched_insert_priorityq_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_suspend
</UL>

<P><STRONG><a name="[255]"></a>_sched_yield</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sched.o(i._sched_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _sched_yield &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2d4]"></a>_task_alloc_td_internal</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, task.o(i._task_alloc_td_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _task_alloc_td_internal &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[2d5]"></a>_task_build_internal</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, task.o(i._task_build_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>

<P><STRONG><a name="[2d6]"></a>_task_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(i._task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _task_create &rArr; _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2d7]"></a>_task_create_internal</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, task.o(i._task_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
</UL>

<P><STRONG><a name="[2d8]"></a>_task_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(i._task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _task_destroy &rArr; _task_destroy_internal &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
</UL>

<P><STRONG><a name="[2d9]"></a>_task_destroy_internal</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, task.o(i._task_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _task_destroy_internal &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_destroy_stack_frame
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_internal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>

<P><STRONG><a name="[74]"></a>_task_exit_function_internal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(i._task_exit_function_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_bu.o(i._psp_build_stack_frame)
</UL>
<P><STRONG><a name="[2c4]"></a>_task_fill_stack_internal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(i._task_fill_stack_internal))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[132]"></a>_task_get_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(i._task_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_err_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_boff_int
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr
</UL>

<P><STRONG><a name="[2da]"></a>_task_get_td</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, task.o(i._task_get_td))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _task_get_td &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[2c6]"></a>_task_init_internal</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, task.o(i._task_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_internal
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[2af]"></a>_task_ready_internal</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task.o(i._task_ready_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_resume
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_destroy
</UL>

<P><STRONG><a name="[25b]"></a>_task_set_error</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, task.o(i._task_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_taskq_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read_write
</UL>

<P><STRONG><a name="[259]"></a>_task_set_error_td_internal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(i._task_set_error_td_internal))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
</UL>

<P><STRONG><a name="[2c9]"></a>_task_stop_preemption</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, task.o(i._task_stop_preemption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _task_stop_preemption &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[287]"></a>_taskq_create</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, taskq.o(i._taskq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _taskq_create &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_open
</UL>

<P><STRONG><a name="[283]"></a>_taskq_destroy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, taskq.o(i._taskq_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _taskq_destroy &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_close
</UL>

<P><STRONG><a name="[282]"></a>_taskq_resume</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, taskq.o(i._taskq_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _taskq_resume &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_nextc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_addc
</UL>

<P><STRONG><a name="[285]"></a>_taskq_suspend</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, taskq.o(i._taskq_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _taskq_suspend &rArr; _sched_insert_priorityq_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_insert_priorityq_internal
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_read
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_putc_internal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_int_ioctl
</UL>

<P><STRONG><a name="[111]"></a>_time_delay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, time.o(i._time_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_msecs_to_ticks_quick
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Task
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_state_Task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurCtrl_Task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
</UL>

<P><STRONG><a name="[2b3]"></a>_time_delay_for</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, time.o(i._time_delay_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _time_delay_for &rArr; _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[2de]"></a>_time_delay_internal</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, time.o(i._time_delay_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[2b2]"></a>_time_delay_until</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, time.o(i._time_delay_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _time_delay_until &rArr; _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[254]"></a>_time_diff_milliseconds</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, time.o(i._time_diff_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_milliseconds
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2df]"></a>_time_diff_ticks</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, time.o(i._time_diff_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _time_diff_ticks &rArr; _psp_subtract_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
</UL>

<P><STRONG><a name="[253]"></a>_time_get_ticks</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, time.o(i._time_get_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _time_get_ticks &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[22a]"></a>_time_notify_kernel</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, time.o(i._time_notify_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _time_notify_kernel &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_systimer_callback
</UL>

<P><STRONG><a name="[228]"></a>_time_set_hwtick_function</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i._time_set_hwtick_function))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[227]"></a>_time_set_hwticks_per_tick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i._time_set_hwticks_per_tick))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[225]"></a>_time_set_ticks_per_sec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i._time_set_ticks_per_sec))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2e2]"></a>adc_init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, adc_ctrl.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc_init &rArr; _lwadc_init_input &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[2e3]"></a>adc_process_all_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_process_all_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = adc_process_all_data &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_idelay_isr
</UL>

<P><STRONG><a name="[2e4]"></a>canInit_Task</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, can_ctrl.o(i.canInit_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = canInit_Task &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_unexpected_isr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_flexcan_io_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Softreset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Set_global_stdmask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Select_mode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_err_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Install_isr_boff_int
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Initialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Error_int_enable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCanID
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[32f]"></a>ch2dec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common_fun.o(i.ch2dec))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKpfromFlash
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKifromFlash
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKdfromFlash
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
</UL>

<P><STRONG><a name="[11f]"></a>checkQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.checkQ))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
</UL>

<P><STRONG><a name="[7b]"></a>cmp0_isr</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, capture.o(i.cmp0_isr))
<BR>[Address Reference Count : 1]<UL><LI> capture.o(i.hscmp_init)
</UL>
<P><STRONG><a name="[2e6]"></a>countCoNum</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, gs_protocol.o(i.countCoNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = countCoNum &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
</UL>

<P><STRONG><a name="[2e8]"></a>dac_init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dac_ctrl.o(i.dac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dac_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[2ea]"></a>decstr2ch</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, common_fun.o(i.decstr2ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decstr2ch &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
</UL>

<P><STRONG><a name="[23b]"></a>dma_callback_reg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma.o(i.dma_callback_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[237]"></a>dma_channel_claim</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dma.o(i.dma_channel_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_channel_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[232]"></a>dma_channel_release</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_channel_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_release
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_deinit
</UL>

<P><STRONG><a name="[238]"></a>dma_channel_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_channel_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[244]"></a>dma_channel_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[2eb]"></a>dma_deinit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[206]"></a>dma_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_init &rArr; dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[294]"></a>dma_request_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_request_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_request_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
</UL>

<P><STRONG><a name="[23c]"></a>dma_request_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_request_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_request_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[239]"></a>dma_request_source</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dma.o(i.dma_request_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_request_source
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_init
</UL>

<P><STRONG><a name="[241]"></a>dma_tcd_mem2reg</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, dma.o(i.dma_tcd_mem2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dma_tcd_mem2reg &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[240]"></a>dma_tcd_reg2mem</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, dma.o(i.dma_tcd_reg2mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dma_tcd_reg2mem &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[243]"></a>dma_transfer_submit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_transfer_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_submit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>

<P><STRONG><a name="[2ec]"></a>doSample</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thermostat.o(i.doSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = doSample &rArr; sample_single &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_single
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat
</UL>

<P><STRONG><a name="[9f]"></a>ffte_flash_ioctl</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, flash_ftfe.o(i.ffte_flash_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ffte_flash_ioctl &rArr; ftfe_flash_swap_and_reset &rArr; ftfe_flash_swap &rArr; ftfe_flash_swap_status &rArr; ftfe_flash_swap_command &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_and_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[9e]"></a>ftfe_flash_deinit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash_ftfe.o(i.ftfe_flash_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ftfe_flash_deinit &rArr; ftfe_deinit_ram_function &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_deinit_ram_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ftfe_flash_erase_sector</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, flash_ftfe.o(i.ftfe_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_erase_sector &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_command_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ftfe_flash_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flash_ftfe.o(i.ftfe_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ftfe_flash_init &rArr; ftfe_init_ram_function &rArr; _lwmem_alloc_align &rArr; _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_ftfx_io_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_ftfe_address
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_init_ram_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(.constdata)
</UL>
<P><STRONG><a name="[2ff]"></a>ftfe_flash_swap</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, flash_ftfe.o(i.ftfe_flash_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_swap &rArr; ftfe_flash_swap_status &rArr; ftfe_flash_swap_command &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_status
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_command
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_and_reset
</UL>

<P><STRONG><a name="[2f7]"></a>ftfe_flash_swap_and_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flash_ftfe.o(i.ftfe_flash_swap_and_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_swap_and_reset &rArr; ftfe_flash_swap &rArr; ftfe_flash_swap_status &rArr; ftfe_flash_swap_command &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffte_flash_ioctl
</UL>

<P><STRONG><a name="[301]"></a>ftfe_flash_swap_command</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, flash_ftfe.o(i.ftfe_flash_swap_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_swap_command &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_command_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_status
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap
</UL>

<P><STRONG><a name="[300]"></a>ftfe_flash_swap_status</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, flash_ftfe.o(i.ftfe_flash_swap_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_swap_status &rArr; ftfe_flash_swap_command &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap
</UL>

<P><STRONG><a name="[9c]"></a>ftfe_flash_write_sector</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, flash_ftfe.o(i.ftfe_flash_write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_write_sector &rArr; ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_command_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(.constdata)
</UL>
<P><STRONG><a name="[302]"></a>functional_init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, main.o(i.functional_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = functional_init &rArr; CurrCalibration &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LD_para
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hscmp_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Task
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTherm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_DAC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getbase_LDI_ADC
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACValueWithCurrent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentWidthPower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEEprom_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[16b]"></a>getCR</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, gs_protocol.o(i.getCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getCR &rArr; strLow2Cap &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strLow2Cap
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearElement
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[2e5]"></a>getCanID</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can_ctrl.o(i.getCanID))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getCanID &rArr; readIDfromFlash &rArr; readDevCanID &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIDfromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit_Task
</UL>

<P><STRONG><a name="[16c]"></a>getCmd</STRONG> (Thumb, 4110 bytes, Stack size 32 bytes, gs_protocol.o(i.getCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = getCmd &rArr; getpara &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearElement
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getstrpara
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpara
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countCoNum
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1b7]"></a>getHardID</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, api.o(i.getHardID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getHardID
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
</UL>

<P><STRONG><a name="[30c]"></a>getpara</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gs_protocol.o(i.getpara))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = getpara &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
</UL>

<P><STRONG><a name="[30d]"></a>getstrpara</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gs_protocol.o(i.getstrpara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getstrpara &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmd
</UL>

<P><STRONG><a name="[30e]"></a>getver</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gs_protocol.o(i.getver))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = getver &rArr; SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2str
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinfor
</UL>

<P><STRONG><a name="[304]"></a>gpio_init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, main.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gpio_init &rArr; FTM_PWM_QuickInit &rArr; FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[30f]"></a>hex2str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, common_fun.o(i.hex2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hex2str
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getver
</UL>

<P><STRONG><a name="[31b]"></a>hex_reverse</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, common_fun.o(i.hex_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hex_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
</UL>

<P><STRONG><a name="[311]"></a>hexstr2ch</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, common_fun.o(i.hexstr2ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hexstr2ch &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
</UL>

<P><STRONG><a name="[159]"></a>hmi_end</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gs_protocol.o(i.hmi_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = hmi_end &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraOverRange
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noIdentify
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
</UL>

<P><STRONG><a name="[305]"></a>hscmp_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, capture.o(i.hscmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hscmp_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[165]"></a>hwtimer_callback_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hwtimer.o(i.hwtimer_callback_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[222]"></a>hwtimer_deinit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hwtimer.o(i.hwtimer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[226]"></a>hwtimer_get_modulo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwtimer.o(i.hwtimer_get_modulo))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[204]"></a>hwtimer_get_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hwtimer.o(i.hwtimer_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_hwticks
</UL>

<P><STRONG><a name="[164]"></a>hwtimer_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hwtimer.o(i.hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwtimer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[166]"></a>hwtimer_set_freq</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hwtimer.o(i.hwtimer_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwtimer_set_freq &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[223]"></a>hwtimer_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hwtimer.o(i.hwtimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_service_routine
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[312]"></a>hwtimer_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hwtimer.o(i.hwtimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer1_callback
</UL>

<P><STRONG><a name="[11d]"></a>ifinit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eeprom.o(i.ifinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ifinit &rArr; initDefault &rArr; writeEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDefault
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
</UL>

<P><STRONG><a name="[1a2]"></a>initCRC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gs_protocol.o(i.initCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = initCRC &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[318]"></a>initDefault</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, eeprom.o(i.initDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initDefault &rArr; writeEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEEPROM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifinit
</UL>

<P><STRONG><a name="[16e]"></a>initID</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gs_protocol.o(i.initID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = initID &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2ch
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19c]"></a>initKA</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.initKA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initKA &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19d]"></a>initKB</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.initKB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initKB &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[174]"></a>initKd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gs_protocol.o(i.initKd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initKd &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[173]"></a>initKi</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gs_protocol.o(i.initKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initKi &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[172]"></a>initKp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gs_protocol.o(i.initKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initKp &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1ad]"></a>initLI</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.initLI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initLI &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1ab]"></a>initLV</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.initLV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initLV &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[16f]"></a>initMAC</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gs_protocol.o(i.initMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = initMAC &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2ch
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_reverse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1af]"></a>initMI</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.initMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initMI &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a6]"></a>initPM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gs_protocol.o(i.initPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initPM &rArr; WriteStrFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[171]"></a>initPreC</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, gs_protocol.o(i.initPreC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = initPreC &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACValueWithCurrent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[170]"></a>initPreT</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, gs_protocol.o(i.initPreT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = initPreT &rArr; WriteIntFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCWithTemp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a1]"></a>initQES</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gs_protocol.o(i.initQES))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initQES &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19e]"></a>initQKA</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gs_protocol.o(i.initQKA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initQKA &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19f]"></a>initQKB</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gs_protocol.o(i.initQKB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initQKB &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1ae]"></a>initQLI</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gs_protocol.o(i.initQLI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initQLI &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1ac]"></a>initQLV</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gs_protocol.o(i.initQLV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initQLV &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1b0]"></a>initQMI</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, gs_protocol.o(i.initQMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = initQMI &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentWidthPower
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[197]"></a>initRK</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, gs_protocol.o(i.initRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initRK &rArr; hmi_end &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr2ch
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStrFromEEprom
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a0]"></a>initSES</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gs_protocol.o(i.initSES))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = initSES &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a4]"></a>initSN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gs_protocol.o(i.initSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initSN &rArr; WriteStrFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a8]"></a>initTM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gs_protocol.o(i.initTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = initTM &rArr; WriteStrFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[175]"></a>initTadjA</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gs_protocol.o(i.initTadjA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initTadjA &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[176]"></a>initTadjB</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gs_protocol.o(i.initTadjB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = initTadjB &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjB
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[162]"></a>initThermoPara</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, thermostat.o(i.initThermoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = initThermoPara &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTherm
</UL>

<P><STRONG><a name="[306]"></a>init_LD_para</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api.o(i.init_LD_para))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[31d]"></a>init_hardware</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, init_hw.o(i.init_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_gpio_io_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_flexbus_setup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_flexbus_mram_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>

<P><STRONG><a name="[7f]"></a>int_service_routine</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fpga_int.o(i.int_service_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int_service_routine &rArr; writeDAC &rArr; DAC_SetBufferValue
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_int_clear_flag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fpga_int.o(i.int_task)
</UL>
<P><STRONG><a name="[322]"></a>int_task</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, fpga_int.o(i.int_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = int_task &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_set_functionality
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_set_attribute
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_int_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_int_get_vector
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_int_enable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[7a]"></a>kinetis_flash_invalidate_cache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_mk64.o(i.kinetis_flash_invalidate_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kinetis_flash_invalidate_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(i.ftfe_flash_init)
</UL>
<P><STRONG><a name="[79]"></a>kinetis_flash_invalidate_cache_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_mk64.o(i.kinetis_flash_invalidate_cache_end))
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(i.ftfe_flash_init)
</UL>
<P><STRONG><a name="[323]"></a>lwgpio_init</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, lwgpio_kgpio.o(i.lwgpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwgpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_set_value
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_set_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[321]"></a>lwgpio_int_clear_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_int_clear_flag))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_service_routine
</UL>

<P><STRONG><a name="[328]"></a>lwgpio_int_enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[327]"></a>lwgpio_int_get_vector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_int_get_vector))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[326]"></a>lwgpio_int_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwgpio_kgpio.o(i.lwgpio_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwgpio_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[325]"></a>lwgpio_set_attribute</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, lwgpio_kgpio.o(i.lwgpio_set_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwgpio_set_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[32a]"></a>lwgpio_set_direction</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_init
</UL>

<P><STRONG><a name="[324]"></a>lwgpio_set_functionality</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_set_functionality))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
</UL>

<P><STRONG><a name="[329]"></a>lwgpio_set_value</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwgpio_kgpio.o(i.lwgpio_set_value))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwgpio_init
</UL>

<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mqx_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[80]"></a>main_task</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, main.o(i.main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; functional_init &rArr; CurrCalibration &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_task
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>noIdentify</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gs_protocol.o(i.noIdentify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = noIdentify &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[32b]"></a>paraOverRange</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gs_protocol.o(i.paraOverRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = paraOverRange &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
</UL>

<P><STRONG><a name="[314]"></a>pit_get_hwtimers_array</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hwtimer_kinetis.o(i.pit_get_hwtimers_array))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_isr_shared
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_deinit
</UL>

<P><STRONG><a name="[313]"></a>pit_get_vectors</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwtimer_kinetis.o(i.pit_get_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_deinit
</UL>

<P><STRONG><a name="[315]"></a>pit_io_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hwtimer_kinetis.o(i.pit_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_pit_init
</UL>

<P><STRONG><a name="[117]"></a>readDAC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dac_ctrl.o(i.readDAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readDAC
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetBufferValue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurCtrl_Task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetCurrentWithDAC
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer1_callback
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
</UL>

<P><STRONG><a name="[1b9]"></a>readDevCanID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readDevCanID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readDevCanID &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readIDfromFlash
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
</UL>

<P><STRONG><a name="[317]"></a>readEEPROM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eeprom.o(i.readEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifinit
</UL>

<P><STRONG><a name="[30b]"></a>readIDfromFlash</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(i.readIDfromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readIDfromFlash &rArr; readDevCanID &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDevCanID
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCanID
</UL>

<P><STRONG><a name="[1bd]"></a>readKd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readKd &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKdfromFlash
</UL>

<P><STRONG><a name="[f3]"></a>readKdfromFlash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKdfromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readKdfromFlash &rArr; readKd &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2dec
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[1bc]"></a>readKi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readKi &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKifromFlash
</UL>

<P><STRONG><a name="[f2]"></a>readKifromFlash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKifromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readKifromFlash &rArr; readKi &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2dec
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKi
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[1bb]"></a>readKp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readKp &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKpfromFlash
</UL>

<P><STRONG><a name="[ee]"></a>readKpfromFlash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readKpfromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readKpfromFlash &rArr; readKp &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2dec
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
</UL>

<P><STRONG><a name="[330]"></a>readLanguage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readLanguage &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLanguagefromFlash
</UL>

<P><STRONG><a name="[157]"></a>readLanguagefromFlash</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(i.readLanguagefromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readLanguagefromFlash &rArr; readLanguage &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
</UL>

<P><STRONG><a name="[1c0]"></a>readMAC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readMAC &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
</UL>

<P><STRONG><a name="[1b8]"></a>readPreCur</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readPreCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readPreCur &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
</UL>

<P><STRONG><a name="[1ba]"></a>readPreTem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readPreTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readPreTem &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
</UL>

<P><STRONG><a name="[331]"></a>readReg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, api.o(i.readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = readReg &rArr; SingleRead &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
</UL>

<P><STRONG><a name="[32d]"></a>readStrEEPROM</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eeprom.o(i.readStrEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjB
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjA
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPreTem
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPreCur
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMAC
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLanguage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDevCanID
</UL>

<P><STRONG><a name="[1be]"></a>readTemAdjA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readTemAdjA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readTemAdjA &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
</UL>

<P><STRONG><a name="[1bf]"></a>readTemAdjB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.readTemAdjB))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readTemAdjB &rArr; readStrEEPROM &rArr; ReadFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
</UL>

<P><STRONG><a name="[108]"></a>retRqtHead</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gs_protocol.o(i.retRqtHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrongFormat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtrReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTMSswitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTECswitch
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSL
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSBWThermo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQinfor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTM
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQSN
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPM
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQHardID
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQCRC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQAUTO
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtLDSwitch
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtDIRswitch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtAPSyncLD
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraOverRange
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noIdentify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTM
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSN
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSES
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQES
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPM
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKi
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initID
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCRC
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCerror
</UL>

<P><STRONG><a name="[31a]"></a>reverse</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, common_fun.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reverse &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQMAC
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMAC
</UL>

<P><STRONG><a name="[1aa]"></a>rqtAPSyncLD</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtAPSyncLD))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtAPSyncLD &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[17e]"></a>rqtDIRswitch</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtDIRswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtDIRswitch &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[189]"></a>rqtLDSwitch</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtLDSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rqtLDSwitch &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[195]"></a>rqtQAUTO</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQAUTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQAUTO &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a3]"></a>rqtQCRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQCRC &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[17f]"></a>rqtQDIRswitch</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtQDIRswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQDIRswitch &rArr; SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[187]"></a>rqtQHardID</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQHardID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQHardID &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2str
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[178]"></a>rqtQID</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQID &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2str
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDevCanID
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[186]"></a>rqtQKd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQKd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rqtQKd &rArr; SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[185]"></a>rqtQKi</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rqtQKi &rArr; SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[184]"></a>rqtQKp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = rqtQKp &rArr; SendStr &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[192]"></a>rqtQL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rqtQL &rArr; SwitchLanguage &rArr; hmi_end &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18c]"></a>rqtQLDI</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtQLDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rqtQLDI &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18f]"></a>rqtQLDV</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gs_protocol.o(i.rqtQLDV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = rqtQLDV &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[180]"></a>rqtQMAC</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQMAC &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_reverse
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2str
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[179]"></a>rqtQPDpwr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gs_protocol.o(i.rqtQPDpwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = rqtQPDpwr &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a7]"></a>rqtQPM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQPM &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[198]"></a>rqtQPower</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, gs_protocol.o(i.rqtQPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = rqtQPower &rArr; GetCurrent &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerWithCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[181]"></a>rqtQPreTem</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gs_protocol.o(i.rqtQPreTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtQPreTem &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a5]"></a>rqtQSN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQSN &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[1a9]"></a>rqtQTM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQTM &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStrFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18b]"></a>rqtQTec</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, gs_protocol.o(i.rqtQTec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtQTec &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18d]"></a>rqtQTem</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtQTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = rqtQTem &rArr; GetTemp &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19b]"></a>rqtQW</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gs_protocol.o(i.rqtQW))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = rqtQW &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[16d]"></a>rqtQinfor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtQinfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtQinfor &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getver
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[177]"></a>rqtQinit</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtQinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rqtQinit &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIntFromEEprom
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromEEprom
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[188]"></a>rqtQparam</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gs_protocol.o(i.rqtQparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = rqtQparam &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2dec
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjB
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readTemAdjA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[196]"></a>rqtSAUTO</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtSAUTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtSAUTO &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[191]"></a>rqtSBWThermo</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtSBWThermo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtSBWThermo &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBW_Thermo
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[193]"></a>rqtSL</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gs_protocol.o(i.rqtSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtSL &rArr; SwitchLanguage &rArr; hmi_end &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchLanguage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[158]"></a>rqtSLDI</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, gs_protocol.o(i.rqtSLDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = rqtSLDI &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACValueWithCurrent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerWithCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[199]"></a>rqtSPower</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, gs_protocol.o(i.rqtSPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rqtSPower &rArr; rqtSLDI &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentWidthPower
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18a]"></a>rqtSTec</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gs_protocol.o(i.rqtSTec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = rqtSTec &rArr; paraOverRange &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraOverRange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[18e]"></a>rqtSTem</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, gs_protocol.o(i.rqtSTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = rqtSTem &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCWithTemp
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[19a]"></a>rqtSW</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gs_protocol.o(i.rqtSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = rqtSW &rArr; WriteFloatFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFloatFromEEprom
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[194]"></a>rqtSave</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gs_protocol.o(i.rqtSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = rqtSave &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIntFromEEprom
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteFromEEprom
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[17d]"></a>rqtTECswitch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gs_protocol.o(i.rqtTECswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rqtTECswitch &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[190]"></a>rqtTMSswitch</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gs_protocol.o(i.rqtTMSswitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = rqtTMSswitch &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THOswitch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[182]"></a>rqtTarget</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, gs_protocol.o(i.rqtTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtTarget &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDstatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetCurrentWithDAC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStrFromEEprom
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_end
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerWithCurrent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[183]"></a>rqtTargetTemp</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, gs_protocol.o(i.rqtTargetTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = rqtTargetTemp &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[17b]"></a>rqtrReg</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, gs_protocol.o(i.rqtrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rqtrReg &rArr; readReg &rArr; SingleRead &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2str
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[17c]"></a>rqtwReg</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, gs_protocol.o(i.rqtwReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = rqtwReg &rArr; writeReg &rArr; SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2ch
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[2ed]"></a>sample_single</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thermostat.o(i.sample_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = sample_single &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConReadADC
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSample
</UL>

<P><STRONG><a name="[30a]"></a>strLow2Cap</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, common_fun.o(i.strLow2Cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strLow2Cap &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCR
</UL>

<P><STRONG><a name="[316]"></a>systick_get_vector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hwtimer_kinetis.o(i.systick_get_vector))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
</UL>

<P><STRONG><a name="[335]"></a>thermostat</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, thermostat.o(i.thermostat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = thermostat &rArr; doSample &rArr; sample_single &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_single
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSample
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat_task
</UL>

<P><STRONG><a name="[336]"></a>thermostat_single</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, thermostat.o(i.thermostat_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = thermostat_single &rArr; TECswitch &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TECswitch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDswitch
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat
</UL>

<P><STRONG><a name="[86]"></a>thermostat_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, thermostat.o(i.thermostat_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = thermostat_task &rArr; thermostat &rArr; doSample &rArr; sample_single &rArr; ConReadADC &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermostat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initThermoPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>toolchain_startup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comp.o(i.toolchain_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = toolchain_startup &rArr; init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__boot
</UL>

<P><STRONG><a name="[88]"></a>uart_comm_rec_task</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart_ctrl.o(i.uart_comm_rec_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = uart_comm_rec_task &rArr; uart_init &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>uart_comm_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart_ctrl.o(i.uart_comm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_comm_send &rArr; _io_fflush &rArr; _io_fseek
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fflush
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[89]"></a>uart_hmi_rec_task</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart_ctrl.o(i.uart_hmi_rec_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = uart_hmi_rec_task &rArr; uart_init &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>uart_hmi_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart_ctrl.o(i.uart_hmi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_hmi_send &rArr; _io_fflush &rArr; _io_fseek
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fflush
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[303]"></a>uart_init</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, uart_ctrl.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = uart_init &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_ioctl
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hmi_rec_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_comm_rec_task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;functional_init
</UL>

<P><STRONG><a name="[81]"></a>uart_task</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart_ctrl.o(i.uart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = uart_task &rArr; uart_init &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>writeADS_Cfg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c_ctrl.o(i.writeADS_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeADS_Cfg &rArr; I2CWaitAck &rArr; I2CStop &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1cb]"></a>writeBW_Thermo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeBW_Thermo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeBW_Thermo &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSBWThermo
</UL>

<P><STRONG><a name="[ff]"></a>writeDAC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dac_ctrl.o(i.writeDAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = writeDAC &rArr; DAC_SetBufferValue
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetBufferValue
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurCtrl_Task
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer1_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_service_routine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
</UL>

<P><STRONG><a name="[1c1]"></a>writeDevCanID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeDevCanID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeDevCanID &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[319]"></a>writeEEPROM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eeprom.o(i.writeEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDefault
</UL>

<P><STRONG><a name="[1c6]"></a>writeKd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeKd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeKd &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1c5]"></a>writeKi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeKi &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1c4]"></a>writeKp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeKp &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1c9]"></a>writeMAC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeMAC &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1c2]"></a>writePreCur</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writePreCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writePreCur &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreCurtoFlash
</UL>

<P><STRONG><a name="[153]"></a>writePreCurtoFlash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eeprom.o(i.writePreCurtoFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = writePreCurtoFlash &rArr; writePreCur &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreCur
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCancel
</UL>

<P><STRONG><a name="[1c3]"></a>writePreTem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writePreTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writePreTem &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreTemtoFlash
</UL>

<P><STRONG><a name="[154]"></a>writePreTemtoFlash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eeprom.o(i.writePreTemtoFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = writePreTemtoFlash &rArr; writePreTem &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreTem
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiCancel
</UL>

<P><STRONG><a name="[334]"></a>writeReg</STRONG> (Thumb, 340 bytes, Stack size 112 bytes, api.o(i.writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = writeReg &rArr; SingleWrite &rArr; WriteByteFromEEprom &rArr; FLASH_WriteSector &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
</UL>

<P><STRONG><a name="[33a]"></a>writeStrEEPROM</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eeprom.o(i.writeStrEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlexmem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeWorkMode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjB
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTemAdjA
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreTem
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePreCur
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMAC
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKi
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeKd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDevCanID
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBW_Thermo
</UL>

<P><STRONG><a name="[1c7]"></a>writeTemAdjA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeTemAdjA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeTemAdjA &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
</UL>

<P><STRONG><a name="[1c8]"></a>writeTemAdjB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeTemAdjB))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeTemAdjB &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
</UL>

<P><STRONG><a name="[1ca]"></a>writeWorkMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.writeWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeWorkMode &rArr; writeStrEEPROM &rArr; WriteFlexmem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleWrite
</UL>

<P><STRONG><a name="[1b1]"></a>wrongFormat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gs_protocol.o(i.wrongFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = wrongFormat &rArr; retRqtHead &rArr; UART_SendByte &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retRqtHead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMsg
</UL>

<P><STRONG><a name="[13]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[38d]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[38e]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[38f]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[390]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[391]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpara
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[33d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[340]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[343]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[347]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[345]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[346]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[348]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[349]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
</UL>

<P><STRONG><a name="[392]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDACRef
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtwReg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
</UL>

<P><STRONG><a name="[393]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[264]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[34a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[34d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTarTemp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimTempWithInitTemp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LongRead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[34b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[33f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[342]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[34c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>

<P><STRONG><a name="[34e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTarget
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmiLoad
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrCalibration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLDV_Task
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAimCurrWithInitCurr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtTargetTemp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSW
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSTec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtSLDI
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQparam
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQW
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTem
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQTec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPreTem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPower
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQPDpwr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rqtQLDI
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjB
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTadjA
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRK
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQMI
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLV
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQLI
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKB
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initQKA
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPreC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMI
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKA
</UL>

<P><STRONG><a name="[350]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[351]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[b3]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[394]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[395]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[33e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[344]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1d7]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[d6]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[de]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[dd]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[352]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13c]"></a>FTM_DualChlConfig</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ftm.o(i.FTM_DualChlConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_pair_index
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
</UL>

<P><STRONG><a name="[141]"></a>FTM_SetMode</STRONG> (Thumb, 1136 bytes, Stack size 16 bytes, ftm.o(i.FTM_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_InvertPolarity
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DualChlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
</UL>

<P><STRONG><a name="[140]"></a>_FTM_InitBasic</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ftm.o(i._FTM_InitBasic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FTM_InitBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
</UL>

<P><STRONG><a name="[13d]"></a>get_channel_pair_index</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ftm.o(i.get_channel_pair_index))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DualChlConfig
</UL>

<P><STRONG><a name="[121]"></a>FlashCmdStart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flash_rw.o(i.FlashCmdStart))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[18]"></a>hwtimer1_callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, time.o(i.hwtimer1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = hwtimer1_callback &rArr; _io_printf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_printf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDAC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readDAC
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(i.InitTime)
</UL>
<P><STRONG><a name="[8d]"></a>hwtimer_pit_deinit</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, hwtimer_pit.o(i.hwtimer_pit_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hwtimer_pit_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_get_vectors
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_get_hwtimers_array
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>hwtimer_pit_get_time</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hwtimer_pit.o(i.hwtimer_pit_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwtimer_pit_get_time &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>hwtimer_pit_init</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, hwtimer_pit.o(i.hwtimer_pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hwtimer_pit_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_io_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_get_vectors
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_get_hwtimers_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>hwtimer_pit_isr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hwtimer_pit.o(i.hwtimer_pit_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwtimer_pit_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(i.hwtimer_pit_init)
</UL>
<P><STRONG><a name="[7d]"></a>hwtimer_pit_isr_shared</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hwtimer_pit.o(i.hwtimer_pit_isr_shared))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hwtimer_pit_isr_shared
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_get_hwtimers_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(i.hwtimer_pit_init)
</UL>
<P><STRONG><a name="[8e]"></a>hwtimer_pit_set_div</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, hwtimer_pit.o(i.hwtimer_pit_set_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hwtimer_pit_set_div
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>hwtimer_pit_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hwtimer_pit.o(i.hwtimer_pit_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_pit_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>hwtimer_pit_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hwtimer_pit.o(i.hwtimer_pit_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_pit_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_pit.o(.constdata)
</UL>
<P><STRONG><a name="[2ab]"></a>_lwadc_restart</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwadc_kadc.o(i._lwadc_restart))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwadc_init_input
</UL>

<P><STRONG><a name="[17]"></a>_int_kernel_isr_epilog</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 1]<UL><LI> dispatch.o(KERNEL)
</UL>
<P><STRONG><a name="[1dc]"></a>__psp_ticks_to_milliseconds</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, psp_tims.o(i.__psp_ticks_to_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_element_to_array
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_mul_128_by_32
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_div_128_by_32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[26e]"></a>_io_mputc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, io_dopr.o(i._io_mputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_mputc
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[26f]"></a>_io_putstr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, io_dopr.o(i._io_putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[320]"></a>_bsp_flexbus_mram_setup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, init_hw.o(i._bsp_flexbus_mram_setup))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[31f]"></a>_bsp_flexbus_setup</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, init_hw.o(i._bsp_flexbus_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_flexbus_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[271]"></a>_io_inf_or_nan</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, io_fp.o(i._io_inf_or_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[245]"></a>_esdhc_get_baudrate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_get_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _esdhc_get_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[246]"></a>_esdhc_get_baudrate_low</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, esdhc.o(i._esdhc_get_baudrate_low))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate
</UL>

<P><STRONG><a name="[247]"></a>_esdhc_get_card_type</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, esdhc.o(i._esdhc_get_card_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _esdhc_get_card_type &rArr; _esdhc_send_command &rArr; _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[249]"></a>_esdhc_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _esdhc_init &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_esdhc_io_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[251]"></a>_esdhc_is_running</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, esdhc.o(i._esdhc_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[20]"></a>_esdhc_isr</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _esdhc_isr &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[248]"></a>_esdhc_send_command</STRONG> (Thumb, 626 bytes, Stack size 64 bytes, esdhc.o(i._esdhc_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _esdhc_send_command &rArr; _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
</UL>

<P><STRONG><a name="[252]"></a>_esdhc_set_baudrate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _esdhc_set_baudrate &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_esdhc_io_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[24b]"></a>_esdhc_set_baudrate_low</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, esdhc.o(i._esdhc_set_baudrate_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>

<P><STRONG><a name="[93]"></a>hwtimer_systick_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hwtimer_systick.o(i.hwtimer_systick_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hwtimer_systick_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>hwtimer_systick_get_time</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hwtimer_systick.o(i.hwtimer_systick_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwtimer_systick_get_time &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>hwtimer_systick_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hwtimer_systick.o(i.hwtimer_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hwtimer_systick_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>hwtimer_systick_isr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hwtimer_systick.o(i.hwtimer_systick_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_systick_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(i.hwtimer_systick_init)
</UL>
<P><STRONG><a name="[94]"></a>hwtimer_systick_set_div</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_set_div))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>hwtimer_systick_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_start))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>hwtimer_systick_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_stop))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>_ki2c_polled_rx_tx</STRONG> (Thumb, 790 bytes, Stack size 20 bytes, i2c_pol_ki2c.o(i._ki2c_polled_rx_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ki2c_polled_rx_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_tx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx
</UL>

<P><STRONG><a name="[28f]"></a>_ki2c_set_baudrate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ki2c_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_ioctl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[58]"></a>_ki2c_isr</STRONG> (Thumb, 1032 bytes, Stack size 24 bytes, i2c_int_ki2c.o(i._ki2c_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _ki2c_isr &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_init)
</UL>
<P><STRONG><a name="[2a1]"></a>_kuart_int_peripheral_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_int_kuart.o(i._kuart_int_peripheral_disable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_enable
</UL>

<P><STRONG><a name="[2a0]"></a>_kuart_int_peripheral_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_int_kuart.o(i._kuart_int_peripheral_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_int_enable
</UL>

<P><STRONG><a name="[2a6]"></a>_kuart_polled_peripheral_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_peripheral_disable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[2a5]"></a>_kuart_polled_peripheral_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_peripheral_enable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[55]"></a>_io_spi_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(i._io_spi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _io_spi_close &rArr; _io_spi_flush &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[28a]"></a>_io_spi_flush</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, spi.o(i._io_spi_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_spi_flush &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_ioctl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_close
</UL>

<P><STRONG><a name="[52]"></a>_io_spi_ioctl</STRONG> (Thumb, 818 bytes, Stack size 40 bytes, spi.o(i._io_spi_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _io_spi_ioctl &rArr; _io_spi_read_write &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read_write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[56]"></a>_io_spi_open</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, spi.o(i._io_spi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _io_spi_open &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[54]"></a>_io_spi_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi.o(i._io_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _io_spi_read &rArr; _io_spi_read_write &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[28b]"></a>_io_spi_read_write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, spi.o(i._io_spi_read_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _io_spi_read_write &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_ioctl
</UL>

<P><STRONG><a name="[51]"></a>_io_spi_uninstall</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi.o(i._io_spi_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _io_spi_uninstall &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[53]"></a>_io_spi_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi.o(i._io_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _io_spi_write &rArr; _io_spi_read_write &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_spi_read_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i._io_spi_install)
</UL>
<P><STRONG><a name="[1ef]"></a>adc_calibrate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, adc_kadc.o(i.adc_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[1a]"></a>adc_complete_isr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, adc_kadc.o(i.adc_complete_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = adc_complete_isr &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_kadc.o(i._adc_hw_init)
</UL>
<P><STRONG><a name="[1f1]"></a>adc_get_calibration_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_get_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_get_calibration_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[1f2]"></a>adc_process_data</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, adc_kadc.o(i.adc_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_all_data
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_complete_isr
</UL>

<P><STRONG><a name="[1f0]"></a>adc_set_calibration_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_set_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_set_calibration_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[1b]"></a>adt_idelay_isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adt_kpdb.o(i.adt_idelay_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = adt_idelay_isr &rArr; adc_process_all_data &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_all_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adt_kpdb.o(i._adt_hw_init)
</UL>
<P><STRONG><a name="[1fc]"></a>adt_period_prescaler</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, adt_kpdb.o(i.adt_period_prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
</UL>

<P><STRONG><a name="[6]"></a>edma_channel_claim</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, edma.o(i.edma_channel_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = edma_channel_claim &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>edma_channel_release</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, edma.o(i.edma_channel_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = edma_channel_release &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>edma_channel_reset</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, edma.o(i.edma_channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = edma_channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>edma_channel_setup</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, edma.o(i.edma_channel_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = edma_channel_setup &rArr; _lwmem_alloc_system_align &rArr; _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[2ee]"></a>edma_channel_sgaidx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, edma.o(i.edma_channel_sgaidx))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_done_isr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
</UL>

<P><STRONG><a name="[a]"></a>edma_channel_status</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, edma.o(i.edma_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = edma_channel_status &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_sgaidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>edma_deinit</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, edma.o(i.edma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = edma_deinit &rArr; edma_uninstall_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>edma_done_isr</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, edma.o(i.edma_done_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = edma_done_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_sgaidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(i.edma_install_isrs)
</UL>
<P><STRONG><a name="[76]"></a>edma_err_isr</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, edma.o(i.edma_err_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edma_err_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(i.edma_install_isrs)
</UL>
<P><STRONG><a name="[2f6]"></a>edma_hwtcd_push</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, edma.o(i.edma_hwtcd_push))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
</UL>

<P><STRONG><a name="[4]"></a>edma_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, edma.o(i.edma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = edma_init &rArr; edma_install_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[2f1]"></a>edma_install_isrs</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, edma.o(i.edma_install_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = edma_install_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_error_vectors
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_done_vectors
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_init
</UL>

<P><STRONG><a name="[e]"></a>edma_request_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, edma.o(i.edma_request_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = edma_request_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>edma_request_enable</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, edma.o(i.edma_request_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = edma_request_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>edma_request_source</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, edma.o(i.edma_request_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = edma_request_source
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[2f0]"></a>edma_reset_module</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, edma.o(i.edma_reset_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = edma_reset_module
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_edma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_deinit
</UL>

<P><STRONG><a name="[2f5]"></a>edma_tcd_prepare</STRONG> (Thumb, 308 bytes, Stack size 20 bytes, edma.o(i.edma_tcd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = edma_tcd_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
</UL>

<P><STRONG><a name="[b]"></a>edma_transfer_submit</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, edma.o(i.edma_transfer_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = edma_transfer_submit &rArr; edma_tcd_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_tcd_prepare
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_hwtcd_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[2ef]"></a>edma_uninstall_isrs</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, edma.o(i.edma_uninstall_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = edma_uninstall_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_error_vectors
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_done_vectors
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_deinit
</UL>

<P><STRONG><a name="[2f8]"></a>ftfe_deinit_ram_function</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_ftfe.o(i.ftfe_deinit_ram_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ftfe_deinit_ram_function &rArr; _lwmem_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_deinit
</UL>

<P><STRONG><a name="[2f9]"></a>ftfe_flash_command_sequence</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, flash_ftfe.o(i.ftfe_flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ftfe_flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_interrupt
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_write_sector
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_swap_command
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_erase_sector
</UL>

<P><STRONG><a name="[2fe]"></a>ftfe_init_ram_function</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, flash_ftfe.o(i.ftfe_init_ram_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ftfe_init_ram_function &rArr; _lwmem_alloc_align &rArr; _lwmem_alloc_align_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftfe_flash_init
</UL>

<P><STRONG><a name="[78]"></a>ftfe_ram_function</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash_ftfe.o(i.ftfe_ram_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftfe_ram_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(i.ftfe_flash_init)
</UL>
<P><STRONG><a name="[77]"></a>ftfe_ram_function_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_ftfe.o(i.ftfe_ram_function_end))
<BR>[Address Reference Count : 1]<UL><LI> flash_ftfe.o(i.ftfe_flash_init)
</UL>
<P><STRONG><a name="[292]"></a>_ki2s_get_mclk_value</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ki2s_get_mclk_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ki2s_get_mclk_value &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_master_mode
</UL>

<P><STRONG><a name="[1e]"></a>_dspi_dma_callback</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, spi_dspi_dma.o(i._dspi_dma_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _dspi_dma_callback &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(i._dspi_dma_init)
</UL>
<P><STRONG><a name="[a4]"></a>_dspi_dma_cs_deassert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_dspi_dma.o(i._dspi_dma_cs_deassert))
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>_dspi_dma_deinit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_dspi_dma.o(i._dspi_dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _dspi_dma_deinit &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_release
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit_low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>_dspi_dma_init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, spi_dspi_dma.o(i._dspi_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _dspi_dma_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_dspi_io_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_source
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_enable
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_setup
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_release
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_claim
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_callback_reg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init_low
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_dspi_base_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>_dspi_dma_ioctl</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, spi_dspi_dma.o(i._dspi_dma_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _dspi_dma_ioctl &rArr; _dspi_find_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_find_baudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>_dspi_dma_setparam</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, spi_dspi_dma.o(i._dspi_dma_setparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _dspi_dma_setparam &rArr; _dspi_dma_tx_rx &rArr; _dspi_dma_transfer &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_find_baudrate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_ctar_params
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_tx_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>_dspi_dma_transfer</STRONG> (Thumb, 192 bytes, Stack size 128 bytes, spi_dspi_dma.o(i._dspi_dma_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _dspi_dma_transfer &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_submit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_reg2mem
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_mem2reg
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_tx_rx
</UL>

<P><STRONG><a name="[a3]"></a>_dspi_dma_tx_rx</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, spi_dspi_dma.o(i._dspi_dma_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _dspi_dma_tx_rx &rArr; _dspi_dma_transfer &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_dma_setparam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi_dma.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>_dspi_cs_deassert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_dspi.o(i._dspi_cs_deassert))
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>_dspi_deinit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, spi_dspi.o(i._dspi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _dspi_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_dspi_vectors
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_deinit_low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>_dspi_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, spi_dspi.o(i._dspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _dspi_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_dspi_io_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_dspi_vectors
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_init_low
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_dspi_base_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>_dspi_ioctl</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, spi_dspi.o(i._dspi_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _dspi_ioctl &rArr; _dspi_find_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_find_baudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>_dspi_isr</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, spi_dspi.o(i._dspi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _dspi_isr &rArr; _lwsem_post &rArr; _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(i._dspi_init)
</UL>
<P><STRONG><a name="[a8]"></a>_dspi_setparam</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, spi_dspi.o(i._dspi_setparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _dspi_setparam &rArr; _dspi_tx_rx &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_tx_rx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_find_baudrate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_ctar_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>_dspi_tx_rx</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, spi_dspi.o(i._dspi_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _dspi_tx_rx &rArr; _lwsem_wait &rArr; _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dspi_setparam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dspi.o(.constdata)
</UL>
<P><STRONG><a name="[34f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[341]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d5]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[d8]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
